Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> TkUsing Declar TkBegin expr TkEnd
Rule 2     expr -> expr TkPuntoYComa expr
Rule 3     expr -> instr
Rule 4     expr -> empty
Rule 5     empty -> <empty>
Rule 6     Declar -> Declar TkComa TkIdent TkOfType Tipo
Rule 7     Declar -> Declar TkComa TkIdent
Rule 8     Declar -> TkIdent TkOfType Tipo
Rule 9     Declar -> Declar TkPuntoYComa Declar
Rule 10    Declar -> TkIdent
Rule 11    Tipo -> TkInteger
Rule 12    Tipo -> TkBoolean
Rule 13    Tipo -> TkCanvas
Rule 14    InNum -> TkNum
Rule 15    InNum -> TkIdent
Rule 16    instr -> TkIdent TkAsignacion expbin
Rule 17    instr -> TkIf booleana TkThen expr TkElse expr TkDone
Rule 18    instr -> TkIf booleana TkThen expr TkDone
Rule 19    instr -> TkWhile booleana TkRepeat expr TkDone
Rule 20    instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
Rule 21    instr -> TkFrom InNum TkTo InNum TkRepeat expr TkDone
Rule 22    instr -> TkPrint TkIdent
Rule 23    instr -> TkPrint TkLienzo
Rule 24    instr -> TkRead TkIdent
Rule 25    arit -> arit operatorA arit
Rule 26    arit -> TkResta arit
Rule 27    arit -> TkParAbre arit TkParCierra
Rule 28    arit -> TkNum
Rule 29    arit -> TkIdent
Rule 30    expbin -> arit
Rule 31    expbin -> booleana
Rule 32    expbin -> lienzo
Rule 33    booleana -> booleana operatorB booleana
Rule 34    booleana -> TkParAbre booleana TkParCierra
Rule 35    booleana -> TkTrue
Rule 36    booleana -> TkFalse
Rule 37    booleana -> TkIdent
Rule 38    booleana -> booleana TkNegacion
Rule 39    booleana -> arit
Rule 40    booleana -> lienzo
Rule 41    lienzo -> lienzo operatorL lienzo
Rule 42    lienzo -> TkParAbre lienzo TkParCierra
Rule 43    lienzo -> TkRot lienzo
Rule 44    lienzo -> lienzo TkTras
Rule 45    lienzo -> TkLienzo
Rule 46    lienzo -> TkIdent
Rule 47    operatorA -> TkSuma
Rule 48    operatorA -> TkResta
Rule 49    operatorA -> TkMult
Rule 50    operatorA -> TkDiv
Rule 51    operatorA -> TkMod
Rule 52    operatorB -> TkMenor
Rule 53    operatorB -> TkMenorIgual
Rule 54    operatorB -> TkMayor
Rule 55    operatorB -> TkMayorIgual
Rule 56    operatorB -> TkIgual
Rule 57    operatorB -> TkDesIgual
Rule 58    operatorB -> TkConjuncion
Rule 59    operatorB -> TkDisyuncion
Rule 60    operatorL -> TkHorConcat
Rule 61    operatorL -> TkVerConcat

Terminals, with rules where they appear

TkAsignacion         : 16
TkBegin              : 1
TkBoolean            : 12
TkCanvas             : 13
TkComa               : 6 7
TkConjuncion         : 58
TkDesIgual           : 57
TkDisyuncion         : 59
TkDiv                : 50
TkDone               : 17 18 19 20 21
TkElse               : 17
TkEnd                : 1
TkFalse              : 36
TkFrom               : 20 21
TkHorConcat          : 60
TkIdent              : 6 7 8 10 15 16 20 22 24 29 37 46
TkIf                 : 17 18
TkIgual              : 56
TkInteger            : 11
TkLienzo             : 23 45
TkMayor              : 54
TkMayorIgual         : 55
TkMenor              : 52
TkMenorIgual         : 53
TkMod                : 51
TkMult               : 49
TkNegacion           : 38
TkNum                : 14 28
TkOfType             : 6 8
TkParAbre            : 27 34 42
TkParCierra          : 27 34 42
TkPrint              : 22 23
TkPuntoYComa         : 2 9
TkRead               : 24
TkRepeat             : 19 20 21
TkResta              : 26 48
TkRot                : 43
TkSuma               : 47
TkThen               : 17 18
TkTo                 : 20 21
TkTras               : 44
TkTrue               : 35
TkUsing              : 1
TkVerConcat          : 61
TkWhile              : 19
TkWith               : 20
error                : 

Nonterminals, with rules where they appear

Declar               : 1 6 7 9 9
InNum                : 20 20 21 21
Tipo                 : 6 8
arit                 : 25 25 26 27 30 39
booleana             : 17 18 19 31 33 33 34 38
empty                : 4
expbin               : 16
expr                 : 1 2 2 17 17 18 19 20 21 0
instr                : 3
lienzo               : 32 40 41 41 42 43 44
operatorA            : 25
operatorB            : 33
operatorL            : 41

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkPuntoYComa    reduce using rule 5 (empty -> .)
    $end            reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 9
    empty                          shift and go to state 7

state 1

    (17) instr -> TkIf . booleana TkThen expr TkElse expr TkDone
    (18) instr -> TkIf . booleana TkThen expr TkDone
    (33) booleana -> . booleana operatorB booleana
    (34) booleana -> . TkParAbre booleana TkParCierra
    (35) booleana -> . TkTrue
    (36) booleana -> . TkFalse
    (37) booleana -> . TkIdent
    (38) booleana -> . booleana TkNegacion
    (39) booleana -> . arit
    (40) booleana -> . lienzo
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkParAbre       shift and go to state 16
    TkTrue          shift and go to state 12
    TkFalse         shift and go to state 14
    TkIdent         shift and go to state 17
    TkResta         shift and go to state 13
    TkNum           shift and go to state 15
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22

    lienzo                         shift and go to state 19
    booleana                       shift and go to state 20
    arit                           shift and go to state 18

state 2

    (3) expr -> instr .

    TkDone          reduce using rule 3 (expr -> instr .)
    TkPuntoYComa    reduce using rule 3 (expr -> instr .)
    $end            reduce using rule 3 (expr -> instr .)
    TkElse          reduce using rule 3 (expr -> instr .)
    TkEnd           reduce using rule 3 (expr -> instr .)


state 3

    (20) instr -> TkWith . TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone

    TkIdent         shift and go to state 23


state 4

    (24) instr -> TkRead . TkIdent

    TkIdent         shift and go to state 24


state 5

    (16) instr -> TkIdent . TkAsignacion expbin

    TkAsignacion    shift and go to state 25


state 6

    (19) instr -> TkWhile . booleana TkRepeat expr TkDone
    (33) booleana -> . booleana operatorB booleana
    (34) booleana -> . TkParAbre booleana TkParCierra
    (35) booleana -> . TkTrue
    (36) booleana -> . TkFalse
    (37) booleana -> . TkIdent
    (38) booleana -> . booleana TkNegacion
    (39) booleana -> . arit
    (40) booleana -> . lienzo
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkParAbre       shift and go to state 16
    TkTrue          shift and go to state 12
    TkFalse         shift and go to state 14
    TkIdent         shift and go to state 17
    TkResta         shift and go to state 13
    TkNum           shift and go to state 15
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22

    lienzo                         shift and go to state 19
    booleana                       shift and go to state 26
    arit                           shift and go to state 18

state 7

    (4) expr -> empty .

    TkDone          reduce using rule 4 (expr -> empty .)
    TkPuntoYComa    reduce using rule 4 (expr -> empty .)
    $end            reduce using rule 4 (expr -> empty .)
    TkElse          reduce using rule 4 (expr -> empty .)
    TkEnd           reduce using rule 4 (expr -> empty .)


state 8

    (1) expr -> TkUsing . Declar TkBegin expr TkEnd
    (6) Declar -> . Declar TkComa TkIdent TkOfType Tipo
    (7) Declar -> . Declar TkComa TkIdent
    (8) Declar -> . TkIdent TkOfType Tipo
    (9) Declar -> . Declar TkPuntoYComa Declar
    (10) Declar -> . TkIdent

    TkIdent         shift and go to state 27

    Declar                         shift and go to state 28

state 9

    (0) S' -> expr .
    (2) expr -> expr . TkPuntoYComa expr

    TkPuntoYComa    shift and go to state 29


state 10

    (21) instr -> TkFrom . InNum TkTo InNum TkRepeat expr TkDone
    (14) InNum -> . TkNum
    (15) InNum -> . TkIdent

    TkNum           shift and go to state 31
    TkIdent         shift and go to state 30

    InNum                          shift and go to state 32

state 11

    (22) instr -> TkPrint . TkIdent
    (23) instr -> TkPrint . TkLienzo

    TkIdent         shift and go to state 33
    TkLienzo        shift and go to state 34


state 12

    (35) booleana -> TkTrue .

    TkParCierra     reduce using rule 35 (booleana -> TkTrue .)
    TkNegacion      reduce using rule 35 (booleana -> TkTrue .)
    TkMenor         reduce using rule 35 (booleana -> TkTrue .)
    TkMenorIgual    reduce using rule 35 (booleana -> TkTrue .)
    TkMayor         reduce using rule 35 (booleana -> TkTrue .)
    TkMayorIgual    reduce using rule 35 (booleana -> TkTrue .)
    TkIgual         reduce using rule 35 (booleana -> TkTrue .)
    TkDesIgual      reduce using rule 35 (booleana -> TkTrue .)
    TkConjuncion    reduce using rule 35 (booleana -> TkTrue .)
    TkDisyuncion    reduce using rule 35 (booleana -> TkTrue .)
    TkPuntoYComa    reduce using rule 35 (booleana -> TkTrue .)
    $end            reduce using rule 35 (booleana -> TkTrue .)
    TkElse          reduce using rule 35 (booleana -> TkTrue .)
    TkDone          reduce using rule 35 (booleana -> TkTrue .)
    TkEnd           reduce using rule 35 (booleana -> TkTrue .)
    TkThen          reduce using rule 35 (booleana -> TkTrue .)
    TkRepeat        reduce using rule 35 (booleana -> TkTrue .)


state 13

    (26) arit -> TkResta . arit
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent

    TkResta         shift and go to state 13
    TkParAbre       shift and go to state 36
    TkNum           shift and go to state 15
    TkIdent         shift and go to state 35

    arit                           shift and go to state 37

state 14

    (36) booleana -> TkFalse .

    TkParCierra     reduce using rule 36 (booleana -> TkFalse .)
    TkNegacion      reduce using rule 36 (booleana -> TkFalse .)
    TkMenor         reduce using rule 36 (booleana -> TkFalse .)
    TkMenorIgual    reduce using rule 36 (booleana -> TkFalse .)
    TkMayor         reduce using rule 36 (booleana -> TkFalse .)
    TkMayorIgual    reduce using rule 36 (booleana -> TkFalse .)
    TkIgual         reduce using rule 36 (booleana -> TkFalse .)
    TkDesIgual      reduce using rule 36 (booleana -> TkFalse .)
    TkConjuncion    reduce using rule 36 (booleana -> TkFalse .)
    TkDisyuncion    reduce using rule 36 (booleana -> TkFalse .)
    TkPuntoYComa    reduce using rule 36 (booleana -> TkFalse .)
    $end            reduce using rule 36 (booleana -> TkFalse .)
    TkElse          reduce using rule 36 (booleana -> TkFalse .)
    TkDone          reduce using rule 36 (booleana -> TkFalse .)
    TkEnd           reduce using rule 36 (booleana -> TkFalse .)
    TkThen          reduce using rule 36 (booleana -> TkFalse .)
    TkRepeat        reduce using rule 36 (booleana -> TkFalse .)


state 15

    (28) arit -> TkNum .

    TkSuma          reduce using rule 28 (arit -> TkNum .)
    TkResta         reduce using rule 28 (arit -> TkNum .)
    TkMult          reduce using rule 28 (arit -> TkNum .)
    TkDiv           reduce using rule 28 (arit -> TkNum .)
    TkMod           reduce using rule 28 (arit -> TkNum .)
    TkPuntoYComa    reduce using rule 28 (arit -> TkNum .)
    $end            reduce using rule 28 (arit -> TkNum .)
    TkElse          reduce using rule 28 (arit -> TkNum .)
    TkDone          reduce using rule 28 (arit -> TkNum .)
    TkEnd           reduce using rule 28 (arit -> TkNum .)
    TkNegacion      reduce using rule 28 (arit -> TkNum .)
    TkMenor         reduce using rule 28 (arit -> TkNum .)
    TkMenorIgual    reduce using rule 28 (arit -> TkNum .)
    TkMayor         reduce using rule 28 (arit -> TkNum .)
    TkMayorIgual    reduce using rule 28 (arit -> TkNum .)
    TkIgual         reduce using rule 28 (arit -> TkNum .)
    TkDesIgual      reduce using rule 28 (arit -> TkNum .)
    TkConjuncion    reduce using rule 28 (arit -> TkNum .)
    TkDisyuncion    reduce using rule 28 (arit -> TkNum .)
    TkThen          reduce using rule 28 (arit -> TkNum .)
    TkRepeat        reduce using rule 28 (arit -> TkNum .)
    TkParCierra     reduce using rule 28 (arit -> TkNum .)


state 16

    (34) booleana -> TkParAbre . booleana TkParCierra
    (27) arit -> TkParAbre . arit TkParCierra
    (42) lienzo -> TkParAbre . lienzo TkParCierra
    (33) booleana -> . booleana operatorB booleana
    (34) booleana -> . TkParAbre booleana TkParCierra
    (35) booleana -> . TkTrue
    (36) booleana -> . TkFalse
    (37) booleana -> . TkIdent
    (38) booleana -> . booleana TkNegacion
    (39) booleana -> . arit
    (40) booleana -> . lienzo
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkParAbre       shift and go to state 16
    TkTrue          shift and go to state 12
    TkFalse         shift and go to state 14
    TkIdent         shift and go to state 17
    TkResta         shift and go to state 13
    TkNum           shift and go to state 15
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22

    lienzo                         shift and go to state 38
    arit                           shift and go to state 40
    booleana                       shift and go to state 39

state 17

    (37) booleana -> TkIdent .
    (29) arit -> TkIdent .
    (46) lienzo -> TkIdent .

  ! reduce/reduce conflict for TkParCierra resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkNegacion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDesIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkConjuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDisyuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkRepeat resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkThen resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkPuntoYComa resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for $end resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkElse resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDone resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkEnd resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkNegacion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDesIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkConjuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDisyuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkThen resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkRepeat resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkParCierra resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkPuntoYComa resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for $end resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkElse resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDone resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkEnd resolved using rule 29 (arit -> TkIdent .)
    TkParCierra     reduce using rule 29 (arit -> TkIdent .)
    TkSuma          reduce using rule 29 (arit -> TkIdent .)
    TkResta         reduce using rule 29 (arit -> TkIdent .)
    TkMult          reduce using rule 29 (arit -> TkIdent .)
    TkDiv           reduce using rule 29 (arit -> TkIdent .)
    TkMod           reduce using rule 29 (arit -> TkIdent .)
    TkNegacion      reduce using rule 29 (arit -> TkIdent .)
    TkMenor         reduce using rule 29 (arit -> TkIdent .)
    TkMenorIgual    reduce using rule 29 (arit -> TkIdent .)
    TkMayor         reduce using rule 29 (arit -> TkIdent .)
    TkMayorIgual    reduce using rule 29 (arit -> TkIdent .)
    TkIgual         reduce using rule 29 (arit -> TkIdent .)
    TkDesIgual      reduce using rule 29 (arit -> TkIdent .)
    TkConjuncion    reduce using rule 29 (arit -> TkIdent .)
    TkDisyuncion    reduce using rule 29 (arit -> TkIdent .)
    TkRepeat        reduce using rule 29 (arit -> TkIdent .)
    TkThen          reduce using rule 29 (arit -> TkIdent .)
    TkPuntoYComa    reduce using rule 29 (arit -> TkIdent .)
    $end            reduce using rule 29 (arit -> TkIdent .)
    TkElse          reduce using rule 29 (arit -> TkIdent .)
    TkDone          reduce using rule 29 (arit -> TkIdent .)
    TkEnd           reduce using rule 29 (arit -> TkIdent .)
    TkTras          reduce using rule 46 (lienzo -> TkIdent .)
    TkHorConcat     reduce using rule 46 (lienzo -> TkIdent .)
    TkVerConcat     reduce using rule 46 (lienzo -> TkIdent .)

  ! TkThen          [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkNegacion      [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMenor         [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMenorIgual    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMayor         [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMayorIgual    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkIgual         [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkDesIgual      [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkConjuncion    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkDisyuncion    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkRepeat        [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkParCierra     [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkPuntoYComa    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! $end            [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkElse          [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkDone          [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkEnd           [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkNegacion      [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMenor         [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMenorIgual    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMayor         [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMayorIgual    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkIgual         [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkDesIgual      [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkConjuncion    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkDisyuncion    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkThen          [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkRepeat        [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkParCierra     [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkPuntoYComa    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! $end            [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkElse          [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkDone          [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkEnd           [ reduce using rule 46 (lienzo -> TkIdent .) ]


state 18

    (39) booleana -> arit .
    (25) arit -> arit . operatorA arit
    (47) operatorA -> . TkSuma
    (48) operatorA -> . TkResta
    (49) operatorA -> . TkMult
    (50) operatorA -> . TkDiv
    (51) operatorA -> . TkMod

    TkThen          reduce using rule 39 (booleana -> arit .)
    TkNegacion      reduce using rule 39 (booleana -> arit .)
    TkMenor         reduce using rule 39 (booleana -> arit .)
    TkMenorIgual    reduce using rule 39 (booleana -> arit .)
    TkMayor         reduce using rule 39 (booleana -> arit .)
    TkMayorIgual    reduce using rule 39 (booleana -> arit .)
    TkIgual         reduce using rule 39 (booleana -> arit .)
    TkDesIgual      reduce using rule 39 (booleana -> arit .)
    TkConjuncion    reduce using rule 39 (booleana -> arit .)
    TkDisyuncion    reduce using rule 39 (booleana -> arit .)
    TkRepeat        reduce using rule 39 (booleana -> arit .)
    TkParCierra     reduce using rule 39 (booleana -> arit .)
    TkPuntoYComa    reduce using rule 39 (booleana -> arit .)
    $end            reduce using rule 39 (booleana -> arit .)
    TkElse          reduce using rule 39 (booleana -> arit .)
    TkDone          reduce using rule 39 (booleana -> arit .)
    TkEnd           reduce using rule 39 (booleana -> arit .)
    TkSuma          shift and go to state 46
    TkResta         shift and go to state 41
    TkMult          shift and go to state 44
    TkDiv           shift and go to state 43
    TkMod           shift and go to state 42

    operatorA                      shift and go to state 45

state 19

    (40) booleana -> lienzo .
    (41) lienzo -> lienzo . operatorL lienzo
    (44) lienzo -> lienzo . TkTras
    (60) operatorL -> . TkHorConcat
    (61) operatorL -> . TkVerConcat

    TkThen          reduce using rule 40 (booleana -> lienzo .)
    TkNegacion      reduce using rule 40 (booleana -> lienzo .)
    TkMenor         reduce using rule 40 (booleana -> lienzo .)
    TkMenorIgual    reduce using rule 40 (booleana -> lienzo .)
    TkMayor         reduce using rule 40 (booleana -> lienzo .)
    TkMayorIgual    reduce using rule 40 (booleana -> lienzo .)
    TkIgual         reduce using rule 40 (booleana -> lienzo .)
    TkDesIgual      reduce using rule 40 (booleana -> lienzo .)
    TkConjuncion    reduce using rule 40 (booleana -> lienzo .)
    TkDisyuncion    reduce using rule 40 (booleana -> lienzo .)
    TkRepeat        reduce using rule 40 (booleana -> lienzo .)
    TkParCierra     reduce using rule 40 (booleana -> lienzo .)
    TkPuntoYComa    reduce using rule 40 (booleana -> lienzo .)
    $end            reduce using rule 40 (booleana -> lienzo .)
    TkElse          reduce using rule 40 (booleana -> lienzo .)
    TkDone          reduce using rule 40 (booleana -> lienzo .)
    TkEnd           reduce using rule 40 (booleana -> lienzo .)
    TkTras          shift and go to state 49
    TkHorConcat     shift and go to state 48
    TkVerConcat     shift and go to state 47

    operatorL                      shift and go to state 50

state 20

    (17) instr -> TkIf booleana . TkThen expr TkElse expr TkDone
    (18) instr -> TkIf booleana . TkThen expr TkDone
    (33) booleana -> booleana . operatorB booleana
    (38) booleana -> booleana . TkNegacion
    (52) operatorB -> . TkMenor
    (53) operatorB -> . TkMenorIgual
    (54) operatorB -> . TkMayor
    (55) operatorB -> . TkMayorIgual
    (56) operatorB -> . TkIgual
    (57) operatorB -> . TkDesIgual
    (58) operatorB -> . TkConjuncion
    (59) operatorB -> . TkDisyuncion

    TkThen          shift and go to state 56
    TkNegacion      shift and go to state 57
    TkMenor         shift and go to state 58
    TkMenorIgual    shift and go to state 51
    TkMayor         shift and go to state 61
    TkMayorIgual    shift and go to state 54
    TkIgual         shift and go to state 53
    TkDesIgual      shift and go to state 52
    TkConjuncion    shift and go to state 55
    TkDisyuncion    shift and go to state 60

    operatorB                      shift and go to state 59

state 21

    (43) lienzo -> TkRot . lienzo
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkParAbre       shift and go to state 64
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22
    TkIdent         shift and go to state 63

    lienzo                         shift and go to state 62

state 22

    (45) lienzo -> TkLienzo .

    TkTras          reduce using rule 45 (lienzo -> TkLienzo .)
    TkHorConcat     reduce using rule 45 (lienzo -> TkLienzo .)
    TkVerConcat     reduce using rule 45 (lienzo -> TkLienzo .)
    TkThen          reduce using rule 45 (lienzo -> TkLienzo .)
    TkNegacion      reduce using rule 45 (lienzo -> TkLienzo .)
    TkMenor         reduce using rule 45 (lienzo -> TkLienzo .)
    TkMenorIgual    reduce using rule 45 (lienzo -> TkLienzo .)
    TkMayor         reduce using rule 45 (lienzo -> TkLienzo .)
    TkMayorIgual    reduce using rule 45 (lienzo -> TkLienzo .)
    TkIgual         reduce using rule 45 (lienzo -> TkLienzo .)
    TkDesIgual      reduce using rule 45 (lienzo -> TkLienzo .)
    TkConjuncion    reduce using rule 45 (lienzo -> TkLienzo .)
    TkDisyuncion    reduce using rule 45 (lienzo -> TkLienzo .)
    TkRepeat        reduce using rule 45 (lienzo -> TkLienzo .)
    TkParCierra     reduce using rule 45 (lienzo -> TkLienzo .)
    TkPuntoYComa    reduce using rule 45 (lienzo -> TkLienzo .)
    $end            reduce using rule 45 (lienzo -> TkLienzo .)
    TkElse          reduce using rule 45 (lienzo -> TkLienzo .)
    TkDone          reduce using rule 45 (lienzo -> TkLienzo .)
    TkEnd           reduce using rule 45 (lienzo -> TkLienzo .)


state 23

    (20) instr -> TkWith TkIdent . TkFrom InNum TkTo InNum TkRepeat expr TkDone

    TkFrom          shift and go to state 65


state 24

    (24) instr -> TkRead TkIdent .

    TkElse          reduce using rule 24 (instr -> TkRead TkIdent .)
    TkDone          reduce using rule 24 (instr -> TkRead TkIdent .)
    TkPuntoYComa    reduce using rule 24 (instr -> TkRead TkIdent .)
    $end            reduce using rule 24 (instr -> TkRead TkIdent .)
    TkEnd           reduce using rule 24 (instr -> TkRead TkIdent .)


state 25

    (16) instr -> TkIdent TkAsignacion . expbin
    (30) expbin -> . arit
    (31) expbin -> . booleana
    (32) expbin -> . lienzo
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent
    (33) booleana -> . booleana operatorB booleana
    (34) booleana -> . TkParAbre booleana TkParCierra
    (35) booleana -> . TkTrue
    (36) booleana -> . TkFalse
    (37) booleana -> . TkIdent
    (38) booleana -> . booleana TkNegacion
    (39) booleana -> . arit
    (40) booleana -> . lienzo
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkResta         shift and go to state 13
    TkParAbre       shift and go to state 70
    TkNum           shift and go to state 15
    TkIdent         shift and go to state 67
    TkTrue          shift and go to state 12
    TkFalse         shift and go to state 14
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22

    lienzo                         shift and go to state 66
    expbin                         shift and go to state 68
    booleana                       shift and go to state 69
    arit                           shift and go to state 71

state 26

    (19) instr -> TkWhile booleana . TkRepeat expr TkDone
    (33) booleana -> booleana . operatorB booleana
    (38) booleana -> booleana . TkNegacion
    (52) operatorB -> . TkMenor
    (53) operatorB -> . TkMenorIgual
    (54) operatorB -> . TkMayor
    (55) operatorB -> . TkMayorIgual
    (56) operatorB -> . TkIgual
    (57) operatorB -> . TkDesIgual
    (58) operatorB -> . TkConjuncion
    (59) operatorB -> . TkDisyuncion

    TkRepeat        shift and go to state 72
    TkNegacion      shift and go to state 57
    TkMenor         shift and go to state 58
    TkMenorIgual    shift and go to state 51
    TkMayor         shift and go to state 61
    TkMayorIgual    shift and go to state 54
    TkIgual         shift and go to state 53
    TkDesIgual      shift and go to state 52
    TkConjuncion    shift and go to state 55
    TkDisyuncion    shift and go to state 60

    operatorB                      shift and go to state 59

state 27

    (8) Declar -> TkIdent . TkOfType Tipo
    (10) Declar -> TkIdent .

    TkOfType        shift and go to state 73
    TkComa          reduce using rule 10 (Declar -> TkIdent .)
    TkPuntoYComa    reduce using rule 10 (Declar -> TkIdent .)
    TkBegin         reduce using rule 10 (Declar -> TkIdent .)


state 28

    (1) expr -> TkUsing Declar . TkBegin expr TkEnd
    (6) Declar -> Declar . TkComa TkIdent TkOfType Tipo
    (7) Declar -> Declar . TkComa TkIdent
    (9) Declar -> Declar . TkPuntoYComa Declar

    TkBegin         shift and go to state 75
    TkComa          shift and go to state 76
    TkPuntoYComa    shift and go to state 74


state 29

    (2) expr -> expr TkPuntoYComa . expr
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkPuntoYComa    reduce using rule 5 (empty -> .)
    $end            reduce using rule 5 (empty -> .)
    TkElse          reduce using rule 5 (empty -> .)
    TkDone          reduce using rule 5 (empty -> .)
    TkEnd           reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 77
    empty                          shift and go to state 7

state 30

    (15) InNum -> TkIdent .

    TkRepeat        reduce using rule 15 (InNum -> TkIdent .)
    TkTo            reduce using rule 15 (InNum -> TkIdent .)


state 31

    (14) InNum -> TkNum .

    TkRepeat        reduce using rule 14 (InNum -> TkNum .)
    TkTo            reduce using rule 14 (InNum -> TkNum .)


state 32

    (21) instr -> TkFrom InNum . TkTo InNum TkRepeat expr TkDone

    TkTo            shift and go to state 78


state 33

    (22) instr -> TkPrint TkIdent .

    TkElse          reduce using rule 22 (instr -> TkPrint TkIdent .)
    TkDone          reduce using rule 22 (instr -> TkPrint TkIdent .)
    TkPuntoYComa    reduce using rule 22 (instr -> TkPrint TkIdent .)
    $end            reduce using rule 22 (instr -> TkPrint TkIdent .)
    TkEnd           reduce using rule 22 (instr -> TkPrint TkIdent .)


state 34

    (23) instr -> TkPrint TkLienzo .

    TkElse          reduce using rule 23 (instr -> TkPrint TkLienzo .)
    TkDone          reduce using rule 23 (instr -> TkPrint TkLienzo .)
    TkPuntoYComa    reduce using rule 23 (instr -> TkPrint TkLienzo .)
    $end            reduce using rule 23 (instr -> TkPrint TkLienzo .)
    TkEnd           reduce using rule 23 (instr -> TkPrint TkLienzo .)


state 35

    (29) arit -> TkIdent .

    TkSuma          reduce using rule 29 (arit -> TkIdent .)
    TkResta         reduce using rule 29 (arit -> TkIdent .)
    TkMult          reduce using rule 29 (arit -> TkIdent .)
    TkDiv           reduce using rule 29 (arit -> TkIdent .)
    TkMod           reduce using rule 29 (arit -> TkIdent .)
    TkThen          reduce using rule 29 (arit -> TkIdent .)
    TkNegacion      reduce using rule 29 (arit -> TkIdent .)
    TkMenor         reduce using rule 29 (arit -> TkIdent .)
    TkMenorIgual    reduce using rule 29 (arit -> TkIdent .)
    TkMayor         reduce using rule 29 (arit -> TkIdent .)
    TkMayorIgual    reduce using rule 29 (arit -> TkIdent .)
    TkIgual         reduce using rule 29 (arit -> TkIdent .)
    TkDesIgual      reduce using rule 29 (arit -> TkIdent .)
    TkConjuncion    reduce using rule 29 (arit -> TkIdent .)
    TkDisyuncion    reduce using rule 29 (arit -> TkIdent .)
    TkRepeat        reduce using rule 29 (arit -> TkIdent .)
    TkParCierra     reduce using rule 29 (arit -> TkIdent .)
    TkPuntoYComa    reduce using rule 29 (arit -> TkIdent .)
    $end            reduce using rule 29 (arit -> TkIdent .)
    TkElse          reduce using rule 29 (arit -> TkIdent .)
    TkDone          reduce using rule 29 (arit -> TkIdent .)
    TkEnd           reduce using rule 29 (arit -> TkIdent .)


state 36

    (27) arit -> TkParAbre . arit TkParCierra
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent

    TkResta         shift and go to state 13
    TkParAbre       shift and go to state 36
    TkNum           shift and go to state 15
    TkIdent         shift and go to state 35

    arit                           shift and go to state 79

state 37

    (26) arit -> TkResta arit .
    (25) arit -> arit . operatorA arit
    (47) operatorA -> . TkSuma
    (48) operatorA -> . TkResta
    (49) operatorA -> . TkMult
    (50) operatorA -> . TkDiv
    (51) operatorA -> . TkMod

    TkSuma          reduce using rule 26 (arit -> TkResta arit .)
    TkResta         reduce using rule 26 (arit -> TkResta arit .)
    TkPuntoYComa    reduce using rule 26 (arit -> TkResta arit .)
    $end            reduce using rule 26 (arit -> TkResta arit .)
    TkElse          reduce using rule 26 (arit -> TkResta arit .)
    TkDone          reduce using rule 26 (arit -> TkResta arit .)
    TkEnd           reduce using rule 26 (arit -> TkResta arit .)
    TkNegacion      reduce using rule 26 (arit -> TkResta arit .)
    TkMenor         reduce using rule 26 (arit -> TkResta arit .)
    TkMenorIgual    reduce using rule 26 (arit -> TkResta arit .)
    TkMayor         reduce using rule 26 (arit -> TkResta arit .)
    TkMayorIgual    reduce using rule 26 (arit -> TkResta arit .)
    TkIgual         reduce using rule 26 (arit -> TkResta arit .)
    TkDesIgual      reduce using rule 26 (arit -> TkResta arit .)
    TkConjuncion    reduce using rule 26 (arit -> TkResta arit .)
    TkDisyuncion    reduce using rule 26 (arit -> TkResta arit .)
    TkThen          reduce using rule 26 (arit -> TkResta arit .)
    TkRepeat        reduce using rule 26 (arit -> TkResta arit .)
    TkParCierra     reduce using rule 26 (arit -> TkResta arit .)
    TkMult          shift and go to state 44
    TkDiv           shift and go to state 43
    TkMod           shift and go to state 42

  ! TkMult          [ reduce using rule 26 (arit -> TkResta arit .) ]
  ! TkDiv           [ reduce using rule 26 (arit -> TkResta arit .) ]
  ! TkMod           [ reduce using rule 26 (arit -> TkResta arit .) ]
  ! TkSuma          [ shift and go to state 46 ]
  ! TkResta         [ shift and go to state 41 ]

    operatorA                      shift and go to state 45

state 38

    (42) lienzo -> TkParAbre lienzo . TkParCierra
    (40) booleana -> lienzo .
    (41) lienzo -> lienzo . operatorL lienzo
    (44) lienzo -> lienzo . TkTras
    (60) operatorL -> . TkHorConcat
    (61) operatorL -> . TkVerConcat

  ! shift/reduce conflict for TkParCierra resolved as shift
    TkParCierra     shift and go to state 80
    TkNegacion      reduce using rule 40 (booleana -> lienzo .)
    TkMenor         reduce using rule 40 (booleana -> lienzo .)
    TkMenorIgual    reduce using rule 40 (booleana -> lienzo .)
    TkMayor         reduce using rule 40 (booleana -> lienzo .)
    TkMayorIgual    reduce using rule 40 (booleana -> lienzo .)
    TkIgual         reduce using rule 40 (booleana -> lienzo .)
    TkDesIgual      reduce using rule 40 (booleana -> lienzo .)
    TkConjuncion    reduce using rule 40 (booleana -> lienzo .)
    TkDisyuncion    reduce using rule 40 (booleana -> lienzo .)
    TkTras          shift and go to state 49
    TkHorConcat     shift and go to state 48
    TkVerConcat     shift and go to state 47

  ! TkParCierra     [ reduce using rule 40 (booleana -> lienzo .) ]

    operatorL                      shift and go to state 50

state 39

    (34) booleana -> TkParAbre booleana . TkParCierra
    (33) booleana -> booleana . operatorB booleana
    (38) booleana -> booleana . TkNegacion
    (52) operatorB -> . TkMenor
    (53) operatorB -> . TkMenorIgual
    (54) operatorB -> . TkMayor
    (55) operatorB -> . TkMayorIgual
    (56) operatorB -> . TkIgual
    (57) operatorB -> . TkDesIgual
    (58) operatorB -> . TkConjuncion
    (59) operatorB -> . TkDisyuncion

    TkParCierra     shift and go to state 81
    TkNegacion      shift and go to state 57
    TkMenor         shift and go to state 58
    TkMenorIgual    shift and go to state 51
    TkMayor         shift and go to state 61
    TkMayorIgual    shift and go to state 54
    TkIgual         shift and go to state 53
    TkDesIgual      shift and go to state 52
    TkConjuncion    shift and go to state 55
    TkDisyuncion    shift and go to state 60

    operatorB                      shift and go to state 59

state 40

    (27) arit -> TkParAbre arit . TkParCierra
    (39) booleana -> arit .
    (25) arit -> arit . operatorA arit
    (47) operatorA -> . TkSuma
    (48) operatorA -> . TkResta
    (49) operatorA -> . TkMult
    (50) operatorA -> . TkDiv
    (51) operatorA -> . TkMod

  ! shift/reduce conflict for TkParCierra resolved as shift
    TkParCierra     shift and go to state 82
    TkNegacion      reduce using rule 39 (booleana -> arit .)
    TkMenor         reduce using rule 39 (booleana -> arit .)
    TkMenorIgual    reduce using rule 39 (booleana -> arit .)
    TkMayor         reduce using rule 39 (booleana -> arit .)
    TkMayorIgual    reduce using rule 39 (booleana -> arit .)
    TkIgual         reduce using rule 39 (booleana -> arit .)
    TkDesIgual      reduce using rule 39 (booleana -> arit .)
    TkConjuncion    reduce using rule 39 (booleana -> arit .)
    TkDisyuncion    reduce using rule 39 (booleana -> arit .)
    TkSuma          shift and go to state 46
    TkResta         shift and go to state 41
    TkMult          shift and go to state 44
    TkDiv           shift and go to state 43
    TkMod           shift and go to state 42

  ! TkParCierra     [ reduce using rule 39 (booleana -> arit .) ]

    operatorA                      shift and go to state 45

state 41

    (48) operatorA -> TkResta .

    TkResta         reduce using rule 48 (operatorA -> TkResta .)
    TkParAbre       reduce using rule 48 (operatorA -> TkResta .)
    TkNum           reduce using rule 48 (operatorA -> TkResta .)
    TkIdent         reduce using rule 48 (operatorA -> TkResta .)


state 42

    (51) operatorA -> TkMod .

    TkResta         reduce using rule 51 (operatorA -> TkMod .)
    TkParAbre       reduce using rule 51 (operatorA -> TkMod .)
    TkNum           reduce using rule 51 (operatorA -> TkMod .)
    TkIdent         reduce using rule 51 (operatorA -> TkMod .)


state 43

    (50) operatorA -> TkDiv .

    TkResta         reduce using rule 50 (operatorA -> TkDiv .)
    TkParAbre       reduce using rule 50 (operatorA -> TkDiv .)
    TkNum           reduce using rule 50 (operatorA -> TkDiv .)
    TkIdent         reduce using rule 50 (operatorA -> TkDiv .)


state 44

    (49) operatorA -> TkMult .

    TkResta         reduce using rule 49 (operatorA -> TkMult .)
    TkParAbre       reduce using rule 49 (operatorA -> TkMult .)
    TkNum           reduce using rule 49 (operatorA -> TkMult .)
    TkIdent         reduce using rule 49 (operatorA -> TkMult .)


state 45

    (25) arit -> arit operatorA . arit
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent

    TkResta         shift and go to state 13
    TkParAbre       shift and go to state 36
    TkNum           shift and go to state 15
    TkIdent         shift and go to state 35

    arit                           shift and go to state 83

state 46

    (47) operatorA -> TkSuma .

    TkResta         reduce using rule 47 (operatorA -> TkSuma .)
    TkParAbre       reduce using rule 47 (operatorA -> TkSuma .)
    TkNum           reduce using rule 47 (operatorA -> TkSuma .)
    TkIdent         reduce using rule 47 (operatorA -> TkSuma .)


state 47

    (61) operatorL -> TkVerConcat .

    TkParAbre       reduce using rule 61 (operatorL -> TkVerConcat .)
    TkRot           reduce using rule 61 (operatorL -> TkVerConcat .)
    TkLienzo        reduce using rule 61 (operatorL -> TkVerConcat .)
    TkIdent         reduce using rule 61 (operatorL -> TkVerConcat .)


state 48

    (60) operatorL -> TkHorConcat .

    TkParAbre       reduce using rule 60 (operatorL -> TkHorConcat .)
    TkRot           reduce using rule 60 (operatorL -> TkHorConcat .)
    TkLienzo        reduce using rule 60 (operatorL -> TkHorConcat .)
    TkIdent         reduce using rule 60 (operatorL -> TkHorConcat .)


state 49

    (44) lienzo -> lienzo TkTras .

    TkTras          reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkHorConcat     reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkVerConcat     reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkThen          reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkNegacion      reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkMenor         reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkMenorIgual    reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkMayor         reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkMayorIgual    reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkIgual         reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkDesIgual      reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkConjuncion    reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkDisyuncion    reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkRepeat        reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkParCierra     reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkPuntoYComa    reduce using rule 44 (lienzo -> lienzo TkTras .)
    $end            reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkElse          reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkDone          reduce using rule 44 (lienzo -> lienzo TkTras .)
    TkEnd           reduce using rule 44 (lienzo -> lienzo TkTras .)


state 50

    (41) lienzo -> lienzo operatorL . lienzo
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkParAbre       shift and go to state 64
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22
    TkIdent         shift and go to state 63

    lienzo                         shift and go to state 84

state 51

    (53) operatorB -> TkMenorIgual .

    TkParAbre       reduce using rule 53 (operatorB -> TkMenorIgual .)
    TkTrue          reduce using rule 53 (operatorB -> TkMenorIgual .)
    TkFalse         reduce using rule 53 (operatorB -> TkMenorIgual .)
    TkIdent         reduce using rule 53 (operatorB -> TkMenorIgual .)
    TkResta         reduce using rule 53 (operatorB -> TkMenorIgual .)
    TkNum           reduce using rule 53 (operatorB -> TkMenorIgual .)
    TkRot           reduce using rule 53 (operatorB -> TkMenorIgual .)
    TkLienzo        reduce using rule 53 (operatorB -> TkMenorIgual .)


state 52

    (57) operatorB -> TkDesIgual .

    TkParAbre       reduce using rule 57 (operatorB -> TkDesIgual .)
    TkTrue          reduce using rule 57 (operatorB -> TkDesIgual .)
    TkFalse         reduce using rule 57 (operatorB -> TkDesIgual .)
    TkIdent         reduce using rule 57 (operatorB -> TkDesIgual .)
    TkResta         reduce using rule 57 (operatorB -> TkDesIgual .)
    TkNum           reduce using rule 57 (operatorB -> TkDesIgual .)
    TkRot           reduce using rule 57 (operatorB -> TkDesIgual .)
    TkLienzo        reduce using rule 57 (operatorB -> TkDesIgual .)


state 53

    (56) operatorB -> TkIgual .

    TkParAbre       reduce using rule 56 (operatorB -> TkIgual .)
    TkTrue          reduce using rule 56 (operatorB -> TkIgual .)
    TkFalse         reduce using rule 56 (operatorB -> TkIgual .)
    TkIdent         reduce using rule 56 (operatorB -> TkIgual .)
    TkResta         reduce using rule 56 (operatorB -> TkIgual .)
    TkNum           reduce using rule 56 (operatorB -> TkIgual .)
    TkRot           reduce using rule 56 (operatorB -> TkIgual .)
    TkLienzo        reduce using rule 56 (operatorB -> TkIgual .)


state 54

    (55) operatorB -> TkMayorIgual .

    TkParAbre       reduce using rule 55 (operatorB -> TkMayorIgual .)
    TkTrue          reduce using rule 55 (operatorB -> TkMayorIgual .)
    TkFalse         reduce using rule 55 (operatorB -> TkMayorIgual .)
    TkIdent         reduce using rule 55 (operatorB -> TkMayorIgual .)
    TkResta         reduce using rule 55 (operatorB -> TkMayorIgual .)
    TkNum           reduce using rule 55 (operatorB -> TkMayorIgual .)
    TkRot           reduce using rule 55 (operatorB -> TkMayorIgual .)
    TkLienzo        reduce using rule 55 (operatorB -> TkMayorIgual .)


state 55

    (58) operatorB -> TkConjuncion .

    TkParAbre       reduce using rule 58 (operatorB -> TkConjuncion .)
    TkTrue          reduce using rule 58 (operatorB -> TkConjuncion .)
    TkFalse         reduce using rule 58 (operatorB -> TkConjuncion .)
    TkIdent         reduce using rule 58 (operatorB -> TkConjuncion .)
    TkResta         reduce using rule 58 (operatorB -> TkConjuncion .)
    TkNum           reduce using rule 58 (operatorB -> TkConjuncion .)
    TkRot           reduce using rule 58 (operatorB -> TkConjuncion .)
    TkLienzo        reduce using rule 58 (operatorB -> TkConjuncion .)


state 56

    (17) instr -> TkIf booleana TkThen . expr TkElse expr TkDone
    (18) instr -> TkIf booleana TkThen . expr TkDone
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkElse          reduce using rule 5 (empty -> .)
    TkDone          reduce using rule 5 (empty -> .)
    TkPuntoYComa    reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 85
    empty                          shift and go to state 7

state 57

    (38) booleana -> booleana TkNegacion .

    TkParCierra     reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkNegacion      reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkMenor         reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkMenorIgual    reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkMayor         reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkMayorIgual    reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkIgual         reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkDesIgual      reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkConjuncion    reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkDisyuncion    reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkPuntoYComa    reduce using rule 38 (booleana -> booleana TkNegacion .)
    $end            reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkElse          reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkDone          reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkEnd           reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkThen          reduce using rule 38 (booleana -> booleana TkNegacion .)
    TkRepeat        reduce using rule 38 (booleana -> booleana TkNegacion .)


state 58

    (52) operatorB -> TkMenor .

    TkParAbre       reduce using rule 52 (operatorB -> TkMenor .)
    TkTrue          reduce using rule 52 (operatorB -> TkMenor .)
    TkFalse         reduce using rule 52 (operatorB -> TkMenor .)
    TkIdent         reduce using rule 52 (operatorB -> TkMenor .)
    TkResta         reduce using rule 52 (operatorB -> TkMenor .)
    TkNum           reduce using rule 52 (operatorB -> TkMenor .)
    TkRot           reduce using rule 52 (operatorB -> TkMenor .)
    TkLienzo        reduce using rule 52 (operatorB -> TkMenor .)


state 59

    (33) booleana -> booleana operatorB . booleana
    (33) booleana -> . booleana operatorB booleana
    (34) booleana -> . TkParAbre booleana TkParCierra
    (35) booleana -> . TkTrue
    (36) booleana -> . TkFalse
    (37) booleana -> . TkIdent
    (38) booleana -> . booleana TkNegacion
    (39) booleana -> . arit
    (40) booleana -> . lienzo
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkParAbre       shift and go to state 16
    TkTrue          shift and go to state 12
    TkFalse         shift and go to state 14
    TkIdent         shift and go to state 17
    TkResta         shift and go to state 13
    TkNum           shift and go to state 15
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22

    lienzo                         shift and go to state 19
    arit                           shift and go to state 18
    booleana                       shift and go to state 86

state 60

    (59) operatorB -> TkDisyuncion .

    TkParAbre       reduce using rule 59 (operatorB -> TkDisyuncion .)
    TkTrue          reduce using rule 59 (operatorB -> TkDisyuncion .)
    TkFalse         reduce using rule 59 (operatorB -> TkDisyuncion .)
    TkIdent         reduce using rule 59 (operatorB -> TkDisyuncion .)
    TkResta         reduce using rule 59 (operatorB -> TkDisyuncion .)
    TkNum           reduce using rule 59 (operatorB -> TkDisyuncion .)
    TkRot           reduce using rule 59 (operatorB -> TkDisyuncion .)
    TkLienzo        reduce using rule 59 (operatorB -> TkDisyuncion .)


state 61

    (54) operatorB -> TkMayor .

    TkParAbre       reduce using rule 54 (operatorB -> TkMayor .)
    TkTrue          reduce using rule 54 (operatorB -> TkMayor .)
    TkFalse         reduce using rule 54 (operatorB -> TkMayor .)
    TkIdent         reduce using rule 54 (operatorB -> TkMayor .)
    TkResta         reduce using rule 54 (operatorB -> TkMayor .)
    TkNum           reduce using rule 54 (operatorB -> TkMayor .)
    TkRot           reduce using rule 54 (operatorB -> TkMayor .)
    TkLienzo        reduce using rule 54 (operatorB -> TkMayor .)


state 62

    (43) lienzo -> TkRot lienzo .
    (41) lienzo -> lienzo . operatorL lienzo
    (44) lienzo -> lienzo . TkTras
    (60) operatorL -> . TkHorConcat
    (61) operatorL -> . TkVerConcat

    TkHorConcat     reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkVerConcat     reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkThen          reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkNegacion      reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkMenor         reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkMenorIgual    reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkMayor         reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkMayorIgual    reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkIgual         reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkDesIgual      reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkConjuncion    reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkDisyuncion    reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkRepeat        reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkParCierra     reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkPuntoYComa    reduce using rule 43 (lienzo -> TkRot lienzo .)
    $end            reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkElse          reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkDone          reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkEnd           reduce using rule 43 (lienzo -> TkRot lienzo .)
    TkTras          shift and go to state 49

  ! TkTras          [ reduce using rule 43 (lienzo -> TkRot lienzo .) ]
  ! TkHorConcat     [ shift and go to state 48 ]
  ! TkVerConcat     [ shift and go to state 47 ]

    operatorL                      shift and go to state 50

state 63

    (46) lienzo -> TkIdent .

    TkTras          reduce using rule 46 (lienzo -> TkIdent .)
    TkHorConcat     reduce using rule 46 (lienzo -> TkIdent .)
    TkVerConcat     reduce using rule 46 (lienzo -> TkIdent .)
    TkThen          reduce using rule 46 (lienzo -> TkIdent .)
    TkNegacion      reduce using rule 46 (lienzo -> TkIdent .)
    TkMenor         reduce using rule 46 (lienzo -> TkIdent .)
    TkMenorIgual    reduce using rule 46 (lienzo -> TkIdent .)
    TkMayor         reduce using rule 46 (lienzo -> TkIdent .)
    TkMayorIgual    reduce using rule 46 (lienzo -> TkIdent .)
    TkIgual         reduce using rule 46 (lienzo -> TkIdent .)
    TkDesIgual      reduce using rule 46 (lienzo -> TkIdent .)
    TkConjuncion    reduce using rule 46 (lienzo -> TkIdent .)
    TkDisyuncion    reduce using rule 46 (lienzo -> TkIdent .)
    TkRepeat        reduce using rule 46 (lienzo -> TkIdent .)
    TkParCierra     reduce using rule 46 (lienzo -> TkIdent .)
    TkPuntoYComa    reduce using rule 46 (lienzo -> TkIdent .)
    $end            reduce using rule 46 (lienzo -> TkIdent .)
    TkElse          reduce using rule 46 (lienzo -> TkIdent .)
    TkDone          reduce using rule 46 (lienzo -> TkIdent .)
    TkEnd           reduce using rule 46 (lienzo -> TkIdent .)


state 64

    (42) lienzo -> TkParAbre . lienzo TkParCierra
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkParAbre       shift and go to state 64
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22
    TkIdent         shift and go to state 63

    lienzo                         shift and go to state 87

state 65

    (20) instr -> TkWith TkIdent TkFrom . InNum TkTo InNum TkRepeat expr TkDone
    (14) InNum -> . TkNum
    (15) InNum -> . TkIdent

    TkNum           shift and go to state 31
    TkIdent         shift and go to state 30

    InNum                          shift and go to state 88

state 66

    (32) expbin -> lienzo .
    (40) booleana -> lienzo .
    (41) lienzo -> lienzo . operatorL lienzo
    (44) lienzo -> lienzo . TkTras
    (60) operatorL -> . TkHorConcat
    (61) operatorL -> . TkVerConcat

  ! reduce/reduce conflict for TkPuntoYComa resolved using rule 32 (expbin -> lienzo .)
  ! reduce/reduce conflict for $end resolved using rule 32 (expbin -> lienzo .)
  ! reduce/reduce conflict for TkElse resolved using rule 32 (expbin -> lienzo .)
  ! reduce/reduce conflict for TkDone resolved using rule 32 (expbin -> lienzo .)
  ! reduce/reduce conflict for TkEnd resolved using rule 32 (expbin -> lienzo .)
    TkPuntoYComa    reduce using rule 32 (expbin -> lienzo .)
    $end            reduce using rule 32 (expbin -> lienzo .)
    TkElse          reduce using rule 32 (expbin -> lienzo .)
    TkDone          reduce using rule 32 (expbin -> lienzo .)
    TkEnd           reduce using rule 32 (expbin -> lienzo .)
    TkNegacion      reduce using rule 40 (booleana -> lienzo .)
    TkMenor         reduce using rule 40 (booleana -> lienzo .)
    TkMenorIgual    reduce using rule 40 (booleana -> lienzo .)
    TkMayor         reduce using rule 40 (booleana -> lienzo .)
    TkMayorIgual    reduce using rule 40 (booleana -> lienzo .)
    TkIgual         reduce using rule 40 (booleana -> lienzo .)
    TkDesIgual      reduce using rule 40 (booleana -> lienzo .)
    TkConjuncion    reduce using rule 40 (booleana -> lienzo .)
    TkDisyuncion    reduce using rule 40 (booleana -> lienzo .)
    TkTras          shift and go to state 49
    TkHorConcat     shift and go to state 48
    TkVerConcat     shift and go to state 47

  ! TkPuntoYComa    [ reduce using rule 40 (booleana -> lienzo .) ]
  ! $end            [ reduce using rule 40 (booleana -> lienzo .) ]
  ! TkElse          [ reduce using rule 40 (booleana -> lienzo .) ]
  ! TkDone          [ reduce using rule 40 (booleana -> lienzo .) ]
  ! TkEnd           [ reduce using rule 40 (booleana -> lienzo .) ]

    operatorL                      shift and go to state 50

state 67

    (29) arit -> TkIdent .
    (37) booleana -> TkIdent .
    (46) lienzo -> TkIdent .

  ! reduce/reduce conflict for TkParCierra resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkNegacion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDesIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkConjuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDisyuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkPuntoYComa resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for $end resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkElse resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDone resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkEnd resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkParCierra resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkNegacion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMenorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayor resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkMayorIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDesIgual resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkConjuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDisyuncion resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkPuntoYComa resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for $end resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkElse resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkDone resolved using rule 29 (arit -> TkIdent .)
  ! reduce/reduce conflict for TkEnd resolved using rule 29 (arit -> TkIdent .)
    TkSuma          reduce using rule 29 (arit -> TkIdent .)
    TkResta         reduce using rule 29 (arit -> TkIdent .)
    TkMult          reduce using rule 29 (arit -> TkIdent .)
    TkDiv           reduce using rule 29 (arit -> TkIdent .)
    TkMod           reduce using rule 29 (arit -> TkIdent .)
    TkPuntoYComa    reduce using rule 29 (arit -> TkIdent .)
    $end            reduce using rule 29 (arit -> TkIdent .)
    TkElse          reduce using rule 29 (arit -> TkIdent .)
    TkDone          reduce using rule 29 (arit -> TkIdent .)
    TkEnd           reduce using rule 29 (arit -> TkIdent .)
    TkNegacion      reduce using rule 29 (arit -> TkIdent .)
    TkMenor         reduce using rule 29 (arit -> TkIdent .)
    TkMenorIgual    reduce using rule 29 (arit -> TkIdent .)
    TkMayor         reduce using rule 29 (arit -> TkIdent .)
    TkMayorIgual    reduce using rule 29 (arit -> TkIdent .)
    TkIgual         reduce using rule 29 (arit -> TkIdent .)
    TkDesIgual      reduce using rule 29 (arit -> TkIdent .)
    TkConjuncion    reduce using rule 29 (arit -> TkIdent .)
    TkDisyuncion    reduce using rule 29 (arit -> TkIdent .)
    TkParCierra     reduce using rule 29 (arit -> TkIdent .)
    TkTras          reduce using rule 46 (lienzo -> TkIdent .)
    TkHorConcat     reduce using rule 46 (lienzo -> TkIdent .)
    TkVerConcat     reduce using rule 46 (lienzo -> TkIdent .)

  ! TkParCierra     [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkNegacion      [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMenor         [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMenorIgual    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMayor         [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkMayorIgual    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkIgual         [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkDesIgual      [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkConjuncion    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkDisyuncion    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkPuntoYComa    [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! $end            [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkElse          [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkDone          [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkEnd           [ reduce using rule 37 (booleana -> TkIdent .) ]
  ! TkParCierra     [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkNegacion      [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMenor         [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMenorIgual    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMayor         [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkMayorIgual    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkIgual         [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkDesIgual      [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkConjuncion    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkDisyuncion    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkPuntoYComa    [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! $end            [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkElse          [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkDone          [ reduce using rule 46 (lienzo -> TkIdent .) ]
  ! TkEnd           [ reduce using rule 46 (lienzo -> TkIdent .) ]


state 68

    (16) instr -> TkIdent TkAsignacion expbin .

    TkElse          reduce using rule 16 (instr -> TkIdent TkAsignacion expbin .)
    TkDone          reduce using rule 16 (instr -> TkIdent TkAsignacion expbin .)
    TkPuntoYComa    reduce using rule 16 (instr -> TkIdent TkAsignacion expbin .)
    $end            reduce using rule 16 (instr -> TkIdent TkAsignacion expbin .)
    TkEnd           reduce using rule 16 (instr -> TkIdent TkAsignacion expbin .)


state 69

    (31) expbin -> booleana .
    (33) booleana -> booleana . operatorB booleana
    (38) booleana -> booleana . TkNegacion
    (52) operatorB -> . TkMenor
    (53) operatorB -> . TkMenorIgual
    (54) operatorB -> . TkMayor
    (55) operatorB -> . TkMayorIgual
    (56) operatorB -> . TkIgual
    (57) operatorB -> . TkDesIgual
    (58) operatorB -> . TkConjuncion
    (59) operatorB -> . TkDisyuncion

    TkPuntoYComa    reduce using rule 31 (expbin -> booleana .)
    $end            reduce using rule 31 (expbin -> booleana .)
    TkElse          reduce using rule 31 (expbin -> booleana .)
    TkDone          reduce using rule 31 (expbin -> booleana .)
    TkEnd           reduce using rule 31 (expbin -> booleana .)
    TkNegacion      shift and go to state 57
    TkMenor         shift and go to state 58
    TkMenorIgual    shift and go to state 51
    TkMayor         shift and go to state 61
    TkMayorIgual    shift and go to state 54
    TkIgual         shift and go to state 53
    TkDesIgual      shift and go to state 52
    TkConjuncion    shift and go to state 55
    TkDisyuncion    shift and go to state 60

    operatorB                      shift and go to state 59

state 70

    (27) arit -> TkParAbre . arit TkParCierra
    (34) booleana -> TkParAbre . booleana TkParCierra
    (42) lienzo -> TkParAbre . lienzo TkParCierra
    (25) arit -> . arit operatorA arit
    (26) arit -> . TkResta arit
    (27) arit -> . TkParAbre arit TkParCierra
    (28) arit -> . TkNum
    (29) arit -> . TkIdent
    (33) booleana -> . booleana operatorB booleana
    (34) booleana -> . TkParAbre booleana TkParCierra
    (35) booleana -> . TkTrue
    (36) booleana -> . TkFalse
    (37) booleana -> . TkIdent
    (38) booleana -> . booleana TkNegacion
    (39) booleana -> . arit
    (40) booleana -> . lienzo
    (41) lienzo -> . lienzo operatorL lienzo
    (42) lienzo -> . TkParAbre lienzo TkParCierra
    (43) lienzo -> . TkRot lienzo
    (44) lienzo -> . lienzo TkTras
    (45) lienzo -> . TkLienzo
    (46) lienzo -> . TkIdent

    TkResta         shift and go to state 13
    TkParAbre       shift and go to state 70
    TkNum           shift and go to state 15
    TkIdent         shift and go to state 67
    TkTrue          shift and go to state 12
    TkFalse         shift and go to state 14
    TkRot           shift and go to state 21
    TkLienzo        shift and go to state 22

    lienzo                         shift and go to state 38
    arit                           shift and go to state 89
    booleana                       shift and go to state 39

state 71

    (30) expbin -> arit .
    (25) arit -> arit . operatorA arit
    (39) booleana -> arit .
    (47) operatorA -> . TkSuma
    (48) operatorA -> . TkResta
    (49) operatorA -> . TkMult
    (50) operatorA -> . TkDiv
    (51) operatorA -> . TkMod

  ! reduce/reduce conflict for TkPuntoYComa resolved using rule 30 (expbin -> arit .)
  ! reduce/reduce conflict for $end resolved using rule 30 (expbin -> arit .)
  ! reduce/reduce conflict for TkElse resolved using rule 30 (expbin -> arit .)
  ! reduce/reduce conflict for TkDone resolved using rule 30 (expbin -> arit .)
  ! reduce/reduce conflict for TkEnd resolved using rule 30 (expbin -> arit .)
    TkPuntoYComa    reduce using rule 30 (expbin -> arit .)
    $end            reduce using rule 30 (expbin -> arit .)
    TkElse          reduce using rule 30 (expbin -> arit .)
    TkDone          reduce using rule 30 (expbin -> arit .)
    TkEnd           reduce using rule 30 (expbin -> arit .)
    TkNegacion      reduce using rule 39 (booleana -> arit .)
    TkMenor         reduce using rule 39 (booleana -> arit .)
    TkMenorIgual    reduce using rule 39 (booleana -> arit .)
    TkMayor         reduce using rule 39 (booleana -> arit .)
    TkMayorIgual    reduce using rule 39 (booleana -> arit .)
    TkIgual         reduce using rule 39 (booleana -> arit .)
    TkDesIgual      reduce using rule 39 (booleana -> arit .)
    TkConjuncion    reduce using rule 39 (booleana -> arit .)
    TkDisyuncion    reduce using rule 39 (booleana -> arit .)
    TkSuma          shift and go to state 46
    TkResta         shift and go to state 41
    TkMult          shift and go to state 44
    TkDiv           shift and go to state 43
    TkMod           shift and go to state 42

  ! TkPuntoYComa    [ reduce using rule 39 (booleana -> arit .) ]
  ! $end            [ reduce using rule 39 (booleana -> arit .) ]
  ! TkElse          [ reduce using rule 39 (booleana -> arit .) ]
  ! TkDone          [ reduce using rule 39 (booleana -> arit .) ]
  ! TkEnd           [ reduce using rule 39 (booleana -> arit .) ]

    operatorA                      shift and go to state 45

state 72

    (19) instr -> TkWhile booleana TkRepeat . expr TkDone
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkDone          reduce using rule 5 (empty -> .)
    TkPuntoYComa    reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 90
    empty                          shift and go to state 7

state 73

    (8) Declar -> TkIdent TkOfType . Tipo
    (11) Tipo -> . TkInteger
    (12) Tipo -> . TkBoolean
    (13) Tipo -> . TkCanvas

    TkInteger       shift and go to state 93
    TkBoolean       shift and go to state 92
    TkCanvas        shift and go to state 94

    Tipo                           shift and go to state 91

state 74

    (9) Declar -> Declar TkPuntoYComa . Declar
    (6) Declar -> . Declar TkComa TkIdent TkOfType Tipo
    (7) Declar -> . Declar TkComa TkIdent
    (8) Declar -> . TkIdent TkOfType Tipo
    (9) Declar -> . Declar TkPuntoYComa Declar
    (10) Declar -> . TkIdent

    TkIdent         shift and go to state 27

    Declar                         shift and go to state 95

state 75

    (1) expr -> TkUsing Declar TkBegin . expr TkEnd
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkEnd           reduce using rule 5 (empty -> .)
    TkPuntoYComa    reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 96
    empty                          shift and go to state 7

state 76

    (6) Declar -> Declar TkComa . TkIdent TkOfType Tipo
    (7) Declar -> Declar TkComa . TkIdent

    TkIdent         shift and go to state 97


state 77

    (2) expr -> expr TkPuntoYComa expr .
    (2) expr -> expr . TkPuntoYComa expr

  ! shift/reduce conflict for TkPuntoYComa resolved as shift
    TkDone          reduce using rule 2 (expr -> expr TkPuntoYComa expr .)
    $end            reduce using rule 2 (expr -> expr TkPuntoYComa expr .)
    TkElse          reduce using rule 2 (expr -> expr TkPuntoYComa expr .)
    TkEnd           reduce using rule 2 (expr -> expr TkPuntoYComa expr .)
    TkPuntoYComa    shift and go to state 29

  ! TkPuntoYComa    [ reduce using rule 2 (expr -> expr TkPuntoYComa expr .) ]


state 78

    (21) instr -> TkFrom InNum TkTo . InNum TkRepeat expr TkDone
    (14) InNum -> . TkNum
    (15) InNum -> . TkIdent

    TkNum           shift and go to state 31
    TkIdent         shift and go to state 30

    InNum                          shift and go to state 98

state 79

    (27) arit -> TkParAbre arit . TkParCierra
    (25) arit -> arit . operatorA arit
    (47) operatorA -> . TkSuma
    (48) operatorA -> . TkResta
    (49) operatorA -> . TkMult
    (50) operatorA -> . TkDiv
    (51) operatorA -> . TkMod

    TkParCierra     shift and go to state 82
    TkSuma          shift and go to state 46
    TkResta         shift and go to state 41
    TkMult          shift and go to state 44
    TkDiv           shift and go to state 43
    TkMod           shift and go to state 42

    operatorA                      shift and go to state 45

state 80

    (42) lienzo -> TkParAbre lienzo TkParCierra .

    TkTras          reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkHorConcat     reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkVerConcat     reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkThen          reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkNegacion      reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkMenor         reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkMenorIgual    reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkMayor         reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkMayorIgual    reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkIgual         reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkDesIgual      reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkConjuncion    reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkDisyuncion    reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkRepeat        reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkParCierra     reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkPuntoYComa    reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    $end            reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkElse          reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkDone          reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)
    TkEnd           reduce using rule 42 (lienzo -> TkParAbre lienzo TkParCierra .)


state 81

    (34) booleana -> TkParAbre booleana TkParCierra .

    TkParCierra     reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkNegacion      reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkMenor         reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkMenorIgual    reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkMayor         reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkMayorIgual    reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkIgual         reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkDesIgual      reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkConjuncion    reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkDisyuncion    reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkPuntoYComa    reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    $end            reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkElse          reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkDone          reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkEnd           reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkThen          reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)
    TkRepeat        reduce using rule 34 (booleana -> TkParAbre booleana TkParCierra .)


state 82

    (27) arit -> TkParAbre arit TkParCierra .

    TkSuma          reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkResta         reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkMult          reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkDiv           reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkMod           reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkPuntoYComa    reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    $end            reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkElse          reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkDone          reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkEnd           reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkNegacion      reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkMenor         reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkMenorIgual    reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkMayor         reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkMayorIgual    reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkIgual         reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkDesIgual      reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkConjuncion    reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkDisyuncion    reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkThen          reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkRepeat        reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)
    TkParCierra     reduce using rule 27 (arit -> TkParAbre arit TkParCierra .)


state 83

    (25) arit -> arit operatorA arit .
    (25) arit -> arit . operatorA arit
    (47) operatorA -> . TkSuma
    (48) operatorA -> . TkResta
    (49) operatorA -> . TkMult
    (50) operatorA -> . TkDiv
    (51) operatorA -> . TkMod

  ! shift/reduce conflict for TkSuma resolved as shift
  ! shift/reduce conflict for TkResta resolved as shift
  ! shift/reduce conflict for TkMult resolved as shift
  ! shift/reduce conflict for TkDiv resolved as shift
  ! shift/reduce conflict for TkMod resolved as shift
    TkPuntoYComa    reduce using rule 25 (arit -> arit operatorA arit .)
    $end            reduce using rule 25 (arit -> arit operatorA arit .)
    TkElse          reduce using rule 25 (arit -> arit operatorA arit .)
    TkDone          reduce using rule 25 (arit -> arit operatorA arit .)
    TkEnd           reduce using rule 25 (arit -> arit operatorA arit .)
    TkNegacion      reduce using rule 25 (arit -> arit operatorA arit .)
    TkMenor         reduce using rule 25 (arit -> arit operatorA arit .)
    TkMenorIgual    reduce using rule 25 (arit -> arit operatorA arit .)
    TkMayor         reduce using rule 25 (arit -> arit operatorA arit .)
    TkMayorIgual    reduce using rule 25 (arit -> arit operatorA arit .)
    TkIgual         reduce using rule 25 (arit -> arit operatorA arit .)
    TkDesIgual      reduce using rule 25 (arit -> arit operatorA arit .)
    TkConjuncion    reduce using rule 25 (arit -> arit operatorA arit .)
    TkDisyuncion    reduce using rule 25 (arit -> arit operatorA arit .)
    TkThen          reduce using rule 25 (arit -> arit operatorA arit .)
    TkRepeat        reduce using rule 25 (arit -> arit operatorA arit .)
    TkParCierra     reduce using rule 25 (arit -> arit operatorA arit .)
    TkSuma          shift and go to state 46
    TkResta         shift and go to state 41
    TkMult          shift and go to state 44
    TkDiv           shift and go to state 43
    TkMod           shift and go to state 42

  ! TkSuma          [ reduce using rule 25 (arit -> arit operatorA arit .) ]
  ! TkResta         [ reduce using rule 25 (arit -> arit operatorA arit .) ]
  ! TkMult          [ reduce using rule 25 (arit -> arit operatorA arit .) ]
  ! TkDiv           [ reduce using rule 25 (arit -> arit operatorA arit .) ]
  ! TkMod           [ reduce using rule 25 (arit -> arit operatorA arit .) ]

    operatorA                      shift and go to state 45

state 84

    (41) lienzo -> lienzo operatorL lienzo .
    (41) lienzo -> lienzo . operatorL lienzo
    (44) lienzo -> lienzo . TkTras
    (60) operatorL -> . TkHorConcat
    (61) operatorL -> . TkVerConcat

  ! shift/reduce conflict for TkTras resolved as shift
  ! shift/reduce conflict for TkHorConcat resolved as shift
  ! shift/reduce conflict for TkVerConcat resolved as shift
    TkThen          reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkNegacion      reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkMenor         reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkMenorIgual    reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkMayor         reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkMayorIgual    reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkIgual         reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkDesIgual      reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkConjuncion    reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkDisyuncion    reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkRepeat        reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkParCierra     reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkPuntoYComa    reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    $end            reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkElse          reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkDone          reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkEnd           reduce using rule 41 (lienzo -> lienzo operatorL lienzo .)
    TkTras          shift and go to state 49
    TkHorConcat     shift and go to state 48
    TkVerConcat     shift and go to state 47

  ! TkTras          [ reduce using rule 41 (lienzo -> lienzo operatorL lienzo .) ]
  ! TkHorConcat     [ reduce using rule 41 (lienzo -> lienzo operatorL lienzo .) ]
  ! TkVerConcat     [ reduce using rule 41 (lienzo -> lienzo operatorL lienzo .) ]

    operatorL                      shift and go to state 50

state 85

    (17) instr -> TkIf booleana TkThen expr . TkElse expr TkDone
    (18) instr -> TkIf booleana TkThen expr . TkDone
    (2) expr -> expr . TkPuntoYComa expr

    TkElse          shift and go to state 99
    TkDone          shift and go to state 100
    TkPuntoYComa    shift and go to state 29


state 86

    (33) booleana -> booleana operatorB booleana .
    (33) booleana -> booleana . operatorB booleana
    (38) booleana -> booleana . TkNegacion
    (52) operatorB -> . TkMenor
    (53) operatorB -> . TkMenorIgual
    (54) operatorB -> . TkMayor
    (55) operatorB -> . TkMayorIgual
    (56) operatorB -> . TkIgual
    (57) operatorB -> . TkDesIgual
    (58) operatorB -> . TkConjuncion
    (59) operatorB -> . TkDisyuncion

  ! shift/reduce conflict for TkNegacion resolved as shift
  ! shift/reduce conflict for TkMenor resolved as shift
  ! shift/reduce conflict for TkMenorIgual resolved as shift
  ! shift/reduce conflict for TkMayor resolved as shift
  ! shift/reduce conflict for TkMayorIgual resolved as shift
  ! shift/reduce conflict for TkIgual resolved as shift
  ! shift/reduce conflict for TkDesIgual resolved as shift
  ! shift/reduce conflict for TkConjuncion resolved as shift
  ! shift/reduce conflict for TkDisyuncion resolved as shift
    TkParCierra     reduce using rule 33 (booleana -> booleana operatorB booleana .)
    TkPuntoYComa    reduce using rule 33 (booleana -> booleana operatorB booleana .)
    $end            reduce using rule 33 (booleana -> booleana operatorB booleana .)
    TkElse          reduce using rule 33 (booleana -> booleana operatorB booleana .)
    TkDone          reduce using rule 33 (booleana -> booleana operatorB booleana .)
    TkEnd           reduce using rule 33 (booleana -> booleana operatorB booleana .)
    TkThen          reduce using rule 33 (booleana -> booleana operatorB booleana .)
    TkRepeat        reduce using rule 33 (booleana -> booleana operatorB booleana .)
    TkNegacion      shift and go to state 57
    TkMenor         shift and go to state 58
    TkMenorIgual    shift and go to state 51
    TkMayor         shift and go to state 61
    TkMayorIgual    shift and go to state 54
    TkIgual         shift and go to state 53
    TkDesIgual      shift and go to state 52
    TkConjuncion    shift and go to state 55
    TkDisyuncion    shift and go to state 60

  ! TkNegacion      [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkMenor         [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkMenorIgual    [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkMayor         [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkMayorIgual    [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkIgual         [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkDesIgual      [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkConjuncion    [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]
  ! TkDisyuncion    [ reduce using rule 33 (booleana -> booleana operatorB booleana .) ]

    operatorB                      shift and go to state 59

state 87

    (42) lienzo -> TkParAbre lienzo . TkParCierra
    (41) lienzo -> lienzo . operatorL lienzo
    (44) lienzo -> lienzo . TkTras
    (60) operatorL -> . TkHorConcat
    (61) operatorL -> . TkVerConcat

    TkParCierra     shift and go to state 80
    TkTras          shift and go to state 49
    TkHorConcat     shift and go to state 48
    TkVerConcat     shift and go to state 47

    operatorL                      shift and go to state 50

state 88

    (20) instr -> TkWith TkIdent TkFrom InNum . TkTo InNum TkRepeat expr TkDone

    TkTo            shift and go to state 101


state 89

    (27) arit -> TkParAbre arit . TkParCierra
    (25) arit -> arit . operatorA arit
    (39) booleana -> arit .
    (47) operatorA -> . TkSuma
    (48) operatorA -> . TkResta
    (49) operatorA -> . TkMult
    (50) operatorA -> . TkDiv
    (51) operatorA -> . TkMod

  ! shift/reduce conflict for TkParCierra resolved as shift
    TkParCierra     shift and go to state 82
    TkNegacion      reduce using rule 39 (booleana -> arit .)
    TkMenor         reduce using rule 39 (booleana -> arit .)
    TkMenorIgual    reduce using rule 39 (booleana -> arit .)
    TkMayor         reduce using rule 39 (booleana -> arit .)
    TkMayorIgual    reduce using rule 39 (booleana -> arit .)
    TkIgual         reduce using rule 39 (booleana -> arit .)
    TkDesIgual      reduce using rule 39 (booleana -> arit .)
    TkConjuncion    reduce using rule 39 (booleana -> arit .)
    TkDisyuncion    reduce using rule 39 (booleana -> arit .)
    TkSuma          shift and go to state 46
    TkResta         shift and go to state 41
    TkMult          shift and go to state 44
    TkDiv           shift and go to state 43
    TkMod           shift and go to state 42

  ! TkParCierra     [ reduce using rule 39 (booleana -> arit .) ]

    operatorA                      shift and go to state 45

state 90

    (19) instr -> TkWhile booleana TkRepeat expr . TkDone
    (2) expr -> expr . TkPuntoYComa expr

    TkDone          shift and go to state 102
    TkPuntoYComa    shift and go to state 29


state 91

    (8) Declar -> TkIdent TkOfType Tipo .

    TkComa          reduce using rule 8 (Declar -> TkIdent TkOfType Tipo .)
    TkPuntoYComa    reduce using rule 8 (Declar -> TkIdent TkOfType Tipo .)
    TkBegin         reduce using rule 8 (Declar -> TkIdent TkOfType Tipo .)


state 92

    (12) Tipo -> TkBoolean .

    TkBegin         reduce using rule 12 (Tipo -> TkBoolean .)
    TkComa          reduce using rule 12 (Tipo -> TkBoolean .)
    TkPuntoYComa    reduce using rule 12 (Tipo -> TkBoolean .)


state 93

    (11) Tipo -> TkInteger .

    TkBegin         reduce using rule 11 (Tipo -> TkInteger .)
    TkComa          reduce using rule 11 (Tipo -> TkInteger .)
    TkPuntoYComa    reduce using rule 11 (Tipo -> TkInteger .)


state 94

    (13) Tipo -> TkCanvas .

    TkBegin         reduce using rule 13 (Tipo -> TkCanvas .)
    TkComa          reduce using rule 13 (Tipo -> TkCanvas .)
    TkPuntoYComa    reduce using rule 13 (Tipo -> TkCanvas .)


state 95

    (9) Declar -> Declar TkPuntoYComa Declar .
    (6) Declar -> Declar . TkComa TkIdent TkOfType Tipo
    (7) Declar -> Declar . TkComa TkIdent
    (9) Declar -> Declar . TkPuntoYComa Declar

  ! shift/reduce conflict for TkComa resolved as shift
  ! shift/reduce conflict for TkPuntoYComa resolved as shift
    TkBegin         reduce using rule 9 (Declar -> Declar TkPuntoYComa Declar .)
    TkComa          shift and go to state 76
    TkPuntoYComa    shift and go to state 74

  ! TkComa          [ reduce using rule 9 (Declar -> Declar TkPuntoYComa Declar .) ]
  ! TkPuntoYComa    [ reduce using rule 9 (Declar -> Declar TkPuntoYComa Declar .) ]


state 96

    (1) expr -> TkUsing Declar TkBegin expr . TkEnd
    (2) expr -> expr . TkPuntoYComa expr

    TkEnd           shift and go to state 103
    TkPuntoYComa    shift and go to state 29


state 97

    (6) Declar -> Declar TkComa TkIdent . TkOfType Tipo
    (7) Declar -> Declar TkComa TkIdent .

    TkOfType        shift and go to state 104
    TkComa          reduce using rule 7 (Declar -> Declar TkComa TkIdent .)
    TkPuntoYComa    reduce using rule 7 (Declar -> Declar TkComa TkIdent .)
    TkBegin         reduce using rule 7 (Declar -> Declar TkComa TkIdent .)


state 98

    (21) instr -> TkFrom InNum TkTo InNum . TkRepeat expr TkDone

    TkRepeat        shift and go to state 105


state 99

    (17) instr -> TkIf booleana TkThen expr TkElse . expr TkDone
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkDone          reduce using rule 5 (empty -> .)
    TkPuntoYComa    reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 106
    empty                          shift and go to state 7

state 100

    (18) instr -> TkIf booleana TkThen expr TkDone .

    TkElse          reduce using rule 18 (instr -> TkIf booleana TkThen expr TkDone .)
    TkDone          reduce using rule 18 (instr -> TkIf booleana TkThen expr TkDone .)
    TkPuntoYComa    reduce using rule 18 (instr -> TkIf booleana TkThen expr TkDone .)
    $end            reduce using rule 18 (instr -> TkIf booleana TkThen expr TkDone .)
    TkEnd           reduce using rule 18 (instr -> TkIf booleana TkThen expr TkDone .)


state 101

    (20) instr -> TkWith TkIdent TkFrom InNum TkTo . InNum TkRepeat expr TkDone
    (14) InNum -> . TkNum
    (15) InNum -> . TkIdent

    TkNum           shift and go to state 31
    TkIdent         shift and go to state 30

    InNum                          shift and go to state 107

state 102

    (19) instr -> TkWhile booleana TkRepeat expr TkDone .

    TkElse          reduce using rule 19 (instr -> TkWhile booleana TkRepeat expr TkDone .)
    TkDone          reduce using rule 19 (instr -> TkWhile booleana TkRepeat expr TkDone .)
    TkPuntoYComa    reduce using rule 19 (instr -> TkWhile booleana TkRepeat expr TkDone .)
    $end            reduce using rule 19 (instr -> TkWhile booleana TkRepeat expr TkDone .)
    TkEnd           reduce using rule 19 (instr -> TkWhile booleana TkRepeat expr TkDone .)


state 103

    (1) expr -> TkUsing Declar TkBegin expr TkEnd .

    TkDone          reduce using rule 1 (expr -> TkUsing Declar TkBegin expr TkEnd .)
    TkPuntoYComa    reduce using rule 1 (expr -> TkUsing Declar TkBegin expr TkEnd .)
    $end            reduce using rule 1 (expr -> TkUsing Declar TkBegin expr TkEnd .)
    TkElse          reduce using rule 1 (expr -> TkUsing Declar TkBegin expr TkEnd .)
    TkEnd           reduce using rule 1 (expr -> TkUsing Declar TkBegin expr TkEnd .)


state 104

    (6) Declar -> Declar TkComa TkIdent TkOfType . Tipo
    (11) Tipo -> . TkInteger
    (12) Tipo -> . TkBoolean
    (13) Tipo -> . TkCanvas

    TkInteger       shift and go to state 93
    TkBoolean       shift and go to state 92
    TkCanvas        shift and go to state 94

    Tipo                           shift and go to state 108

state 105

    (21) instr -> TkFrom InNum TkTo InNum TkRepeat . expr TkDone
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkDone          reduce using rule 5 (empty -> .)
    TkPuntoYComa    reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 109
    empty                          shift and go to state 7

state 106

    (17) instr -> TkIf booleana TkThen expr TkElse expr . TkDone
    (2) expr -> expr . TkPuntoYComa expr

    TkDone          shift and go to state 110
    TkPuntoYComa    shift and go to state 29


state 107

    (20) instr -> TkWith TkIdent TkFrom InNum TkTo InNum . TkRepeat expr TkDone

    TkRepeat        shift and go to state 111


state 108

    (6) Declar -> Declar TkComa TkIdent TkOfType Tipo .

    TkComa          reduce using rule 6 (Declar -> Declar TkComa TkIdent TkOfType Tipo .)
    TkPuntoYComa    reduce using rule 6 (Declar -> Declar TkComa TkIdent TkOfType Tipo .)
    TkBegin         reduce using rule 6 (Declar -> Declar TkComa TkIdent TkOfType Tipo .)


state 109

    (21) instr -> TkFrom InNum TkTo InNum TkRepeat expr . TkDone
    (2) expr -> expr . TkPuntoYComa expr

    TkDone          shift and go to state 112
    TkPuntoYComa    shift and go to state 29


state 110

    (17) instr -> TkIf booleana TkThen expr TkElse expr TkDone .

    TkElse          reduce using rule 17 (instr -> TkIf booleana TkThen expr TkElse expr TkDone .)
    TkDone          reduce using rule 17 (instr -> TkIf booleana TkThen expr TkElse expr TkDone .)
    TkPuntoYComa    reduce using rule 17 (instr -> TkIf booleana TkThen expr TkElse expr TkDone .)
    $end            reduce using rule 17 (instr -> TkIf booleana TkThen expr TkElse expr TkDone .)
    TkEnd           reduce using rule 17 (instr -> TkIf booleana TkThen expr TkElse expr TkDone .)


state 111

    (20) instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat . expr TkDone
    (1) expr -> . TkUsing Declar TkBegin expr TkEnd
    (2) expr -> . expr TkPuntoYComa expr
    (3) expr -> . instr
    (4) expr -> . empty
    (16) instr -> . TkIdent TkAsignacion expbin
    (17) instr -> . TkIf booleana TkThen expr TkElse expr TkDone
    (18) instr -> . TkIf booleana TkThen expr TkDone
    (19) instr -> . TkWhile booleana TkRepeat expr TkDone
    (20) instr -> . TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (21) instr -> . TkFrom InNum TkTo InNum TkRepeat expr TkDone
    (22) instr -> . TkPrint TkIdent
    (23) instr -> . TkPrint TkLienzo
    (24) instr -> . TkRead TkIdent
    (5) empty -> .

    TkUsing         shift and go to state 8
    TkIdent         shift and go to state 5
    TkIf            shift and go to state 1
    TkWhile         shift and go to state 6
    TkWith          shift and go to state 3
    TkFrom          shift and go to state 10
    TkPrint         shift and go to state 11
    TkRead          shift and go to state 4
    TkDone          reduce using rule 5 (empty -> .)
    TkPuntoYComa    reduce using rule 5 (empty -> .)

    instr                          shift and go to state 2
    expr                           shift and go to state 113
    empty                          shift and go to state 7

state 112

    (21) instr -> TkFrom InNum TkTo InNum TkRepeat expr TkDone .

    TkElse          reduce using rule 21 (instr -> TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    TkDone          reduce using rule 21 (instr -> TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    TkPuntoYComa    reduce using rule 21 (instr -> TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    $end            reduce using rule 21 (instr -> TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    TkEnd           reduce using rule 21 (instr -> TkFrom InNum TkTo InNum TkRepeat expr TkDone .)


state 113

    (20) instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr . TkDone
    (2) expr -> expr . TkPuntoYComa expr

    TkDone          shift and go to state 114
    TkPuntoYComa    shift and go to state 29


state 114

    (20) instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone .

    TkElse          reduce using rule 20 (instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    TkDone          reduce using rule 20 (instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    TkPuntoYComa    reduce using rule 20 (instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    $end            reduce using rule 20 (instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone .)
    TkEnd           reduce using rule 20 (instr -> TkWith TkIdent TkFrom InNum TkTo InNum TkRepeat expr TkDone .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TkParCierra in state 38 resolved as shift
WARNING: shift/reduce conflict for TkParCierra in state 40 resolved as shift
WARNING: shift/reduce conflict for TkPuntoYComa in state 77 resolved as shift
WARNING: shift/reduce conflict for TkSuma in state 83 resolved as shift
WARNING: shift/reduce conflict for TkResta in state 83 resolved as shift
WARNING: shift/reduce conflict for TkMult in state 83 resolved as shift
WARNING: shift/reduce conflict for TkDiv in state 83 resolved as shift
WARNING: shift/reduce conflict for TkMod in state 83 resolved as shift
WARNING: shift/reduce conflict for TkTras in state 84 resolved as shift
WARNING: shift/reduce conflict for TkHorConcat in state 84 resolved as shift
WARNING: shift/reduce conflict for TkVerConcat in state 84 resolved as shift
WARNING: shift/reduce conflict for TkNegacion in state 86 resolved as shift
WARNING: shift/reduce conflict for TkMenor in state 86 resolved as shift
WARNING: shift/reduce conflict for TkMenorIgual in state 86 resolved as shift
WARNING: shift/reduce conflict for TkMayor in state 86 resolved as shift
WARNING: shift/reduce conflict for TkMayorIgual in state 86 resolved as shift
WARNING: shift/reduce conflict for TkIgual in state 86 resolved as shift
WARNING: shift/reduce conflict for TkDesIgual in state 86 resolved as shift
WARNING: shift/reduce conflict for TkConjuncion in state 86 resolved as shift
WARNING: shift/reduce conflict for TkDisyuncion in state 86 resolved as shift
WARNING: shift/reduce conflict for TkParCierra in state 89 resolved as shift
WARNING: shift/reduce conflict for TkComa in state 95 resolved as shift
WARNING: shift/reduce conflict for TkPuntoYComa in state 95 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (arit -> TkIdent)
WARNING: rejected rule (booleana -> TkIdent) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (arit -> TkIdent)
WARNING: rejected rule (lienzo -> TkIdent) in state 17
WARNING: reduce/reduce conflict in state 66 resolved using rule (expbin -> lienzo)
WARNING: rejected rule (booleana -> lienzo) in state 66
WARNING: reduce/reduce conflict in state 67 resolved using rule (arit -> TkIdent)
WARNING: rejected rule (booleana -> TkIdent) in state 67
WARNING: reduce/reduce conflict in state 67 resolved using rule (arit -> TkIdent)
WARNING: rejected rule (lienzo -> TkIdent) in state 67
WARNING: reduce/reduce conflict in state 71 resolved using rule (expbin -> arit)
WARNING: rejected rule (booleana -> arit) in state 71
WARNING: Rule (booleana -> TkIdent) is never reduced
