
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xf2\xd5\xab\x99e\xfc\x87"\x90\x9am\x0e\xa2\xbfh\x9d'
    
_lr_action_items = {'TkTrue':([1,4,13,17,22,24,25,26,27,29,30,31,32,42,52,],[10,10,10,10,-40,-44,-45,-43,-41,-42,-39,10,-46,10,10,]),'TkMod':([38,40,45,50,53,56,58,64,81,82,],[-16,-15,69,-16,69,-16,69,69,-14,69,]),'TkIf':([0,15,28,35,76,83,90,],[1,1,1,1,1,1,1,]),'TkResta':([17,22,24,25,26,27,29,30,31,32,36,38,40,42,45,50,52,53,56,57,58,64,68,69,70,71,72,73,81,82,],[36,-40,-44,-45,-43,-41,-42,-39,36,-46,36,-16,-15,36,68,-16,36,68,-16,36,-13,68,-35,-38,-37,-36,36,-34,-14,68,]),'TkNegacion':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,23,-26,23,-24,23,-27,-15,23,-32,-22,-16,23,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkParAbre':([1,4,13,17,22,24,25,26,27,29,30,31,32,36,42,44,52,57,59,60,62,67,68,69,70,71,72,73,],[13,13,13,42,-40,-44,-45,-43,-41,-42,-39,52,-46,57,42,67,52,57,-48,-47,67,67,-35,-38,-37,-36,57,-34,]),'TkVerConcat':([37,38,43,49,50,61,63,65,66,79,80,],[59,-33,-32,59,-33,-31,59,-30,-33,59,-29,]),'TkFalse':([1,4,13,17,22,24,25,26,27,29,30,31,32,42,52,],[14,14,14,14,-40,-44,-45,-43,-41,-42,-39,14,-46,14,14,]),'TkConjuncion':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,25,-26,25,-24,25,-27,-15,25,-32,-22,-16,25,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkNum':([6,17,22,24,25,26,27,29,30,31,32,36,42,46,47,52,57,68,69,70,71,72,73,84,],[18,40,-40,-44,-45,-43,-41,-42,-39,40,-46,40,40,74,75,40,40,-35,-38,-37,-36,40,-34,87,]),'TkWith':([0,15,28,35,76,83,90,],[9,9,9,9,9,9,9,]),'TkDesIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,24,-26,24,-24,24,-27,-15,24,-32,-22,-16,24,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkDone':([10,14,19,20,23,37,38,39,40,41,43,45,48,49,50,51,53,54,55,56,58,61,65,66,77,78,79,80,81,82,85,86,88,89,91,92,],[-25,-26,-10,-11,-24,-19,-16,-4,-15,-18,-32,-17,77,-22,-16,-20,-21,-23,78,-16,-13,-31,-30,-33,-6,-7,-28,-29,-14,-12,88,89,-5,-9,92,-8,]),'TkRead':([0,15,28,35,76,83,90,],[8,8,8,8,8,8,8,]),'TkMenorIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,22,-26,22,-24,22,-27,-15,22,-32,-22,-16,22,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkIdent':([0,1,4,8,9,13,15,17,22,24,25,26,27,28,29,30,31,32,35,36,42,44,52,57,59,60,62,67,68,69,70,71,72,73,76,83,90,],[5,11,11,20,21,11,5,38,-40,-44,-45,-43,-41,5,-42,-39,50,-46,5,56,38,66,50,56,-48,-47,66,66,-35,-38,-37,-36,56,-34,5,5,5,]),'TkMult':([38,40,45,50,53,56,58,64,81,82,],[-16,-15,71,-16,71,-16,71,71,-14,71,]),'TkDisyuncion':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,32,-26,32,-24,32,-27,-15,32,-32,-22,-16,32,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkWhile':([0,15,28,35,76,83,90,],[4,4,4,4,4,4,4,]),'TkMayor':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,27,-26,27,-24,27,-27,-15,27,-32,-22,-16,27,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'$end':([2,3,10,14,19,20,23,34,37,38,39,40,41,43,45,49,50,51,53,54,56,58,61,65,66,77,78,79,80,81,82,88,89,92,],[-2,0,-25,-26,-10,-11,-24,-1,-19,-16,-4,-15,-18,-32,-17,-22,-16,-20,-21,-23,-16,-13,-31,-30,-33,-6,-7,-28,-29,-14,-12,-5,-9,-8,]),'TkPuntoYComa':([2,3,10,14,19,20,23,34,37,38,39,40,41,43,45,49,50,51,53,54,56,58,61,65,66,77,78,79,80,81,82,88,89,92,],[-2,15,-25,-26,-10,-11,-24,-1,-19,-16,-4,-15,-18,-32,-17,-22,-16,-20,-21,-23,-16,-13,-31,-30,-33,-6,-7,-28,-29,-14,-12,-5,-9,-8,]),'TkAsignacion':([5,],[17,]),'TkElse':([10,14,19,20,23,37,38,39,40,41,43,45,48,49,50,51,53,54,56,58,61,65,66,77,78,79,80,81,82,88,89,92,],[-25,-26,-10,-11,-24,-19,-16,-4,-15,-18,-32,-17,76,-22,-16,-20,-21,-23,-16,-13,-31,-30,-33,-6,-7,-28,-29,-14,-12,-5,-9,-8,]),'TkHorConcat':([37,38,43,49,50,61,63,65,66,79,80,],[60,-33,-32,60,-33,-31,60,-30,-33,60,-29,]),'TkDiv':([38,40,45,50,53,56,58,64,81,82,],[-16,-15,70,-16,70,-16,70,70,-14,70,]),'TkTras':([37,38,43,49,50,61,63,65,66,79,80,],[61,-33,-32,61,-33,-31,61,61,-33,61,-29,]),'TkIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,26,-26,26,-24,26,-27,-15,26,-32,-22,-16,26,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkTo':([18,75,],[46,84,]),'TkMenor':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,30,-26,30,-24,30,-27,-15,30,-32,-22,-16,30,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkRot':([17,22,24,25,26,27,29,30,31,32,42,44,52,59,60,62,67,],[44,-40,-44,-45,-43,-41,-42,-39,44,-46,44,44,44,-48,-47,44,44,]),'TkRepeat':([10,11,14,16,23,40,43,49,50,51,53,54,56,58,61,65,66,74,79,80,81,82,87,],[-25,-27,-26,35,-24,-15,-32,-22,-16,-20,-21,-23,-16,-13,-31,-30,-33,83,-28,-29,-14,-12,90,]),'TkMayorIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,29,-26,29,-24,29,-27,-15,29,-32,-22,-16,29,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkParCierra':([10,11,14,23,33,38,40,43,49,50,51,53,54,56,58,61,63,64,65,66,79,80,81,82,],[-25,-27,-26,-24,54,-16,-15,-32,-22,-16,-20,-21,-23,-16,-13,-31,80,81,-30,-33,-28,-29,-14,-12,]),'TkFrom':([0,15,21,28,35,76,83,90,],[6,6,47,6,6,6,6,6,]),'TkThen':([10,11,12,14,23,40,43,49,50,51,53,54,56,58,61,65,66,79,80,81,82,],[-25,-27,28,-26,-24,-15,-32,-22,-16,-20,-21,-23,-16,-13,-31,-30,-33,-28,-29,-14,-12,]),'TkLienzo':([7,17,22,24,25,26,27,29,30,31,32,42,44,52,59,60,62,67,],[19,43,-40,-44,-45,-43,-41,-42,-39,43,-46,43,43,43,-48,-47,43,43,]),'TkSuma':([38,40,45,50,53,56,58,64,81,82,],[-16,-15,73,-16,73,-16,-13,73,-14,73,]),'TkPrint':([0,15,28,35,76,83,90,],[7,7,7,7,7,7,7,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instr':([0,15,28,35,76,83,90,],[2,34,48,55,85,86,91,]),'expr':([0,],[3,]),'lienzo':([17,31,42,44,52,62,67,],[37,49,63,65,63,79,63,]),'expbin':([17,],[39,]),'booleana':([1,4,13,17,31,42,52,],[12,16,33,41,51,33,33,]),'operatorA':([45,53,58,64,82,],[72,72,72,72,72,]),'operatorB':([12,16,33,41,51,],[31,31,31,31,31,]),'arit':([17,31,36,42,52,57,72,],[45,53,58,64,64,64,82,]),'operatorL':([37,49,63,65,79,],[62,62,62,62,62,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> expr TkPuntoYComa instr','expr',3,'p_expr','./parser',343),
  ('expr -> instr','expr',1,'p_expr','./parser',344),
  ('empty -> <empty>','empty',0,'p_empty','./parser',351),
  ('instr -> TkIdent TkAsignacion expbin','instr',3,'p_instr','./parser',356),
  ('instr -> TkIf booleana TkThen instr TkElse instr TkDone','instr',7,'p_instr','./parser',357),
  ('instr -> TkIf booleana TkThen instr TkDone','instr',5,'p_instr','./parser',358),
  ('instr -> TkWhile booleana TkRepeat instr TkDone','instr',5,'p_instr','./parser',359),
  ('instr -> TkWith TkIdent TkFrom TkNum TkTo TkNum TkRepeat instr TkDone','instr',9,'p_instr','./parser',360),
  ('instr -> TkFrom TkNum TkTo TkNum TkRepeat instr TkDone','instr',7,'p_instr','./parser',361),
  ('instr -> TkPrint TkLienzo','instr',2,'p_instr','./parser',362),
  ('instr -> TkRead TkIdent','instr',2,'p_instr','./parser',363),
  ('arit -> arit operatorA arit','arit',3,'p_arit','./parser',389),
  ('arit -> TkResta arit','arit',2,'p_arit','./parser',390),
  ('arit -> TkParAbre arit TkParCierra','arit',3,'p_arit','./parser',391),
  ('arit -> TkNum','arit',1,'p_arit','./parser',392),
  ('arit -> TkIdent','arit',1,'p_arit','./parser',393),
  ('expbin -> arit','expbin',1,'p_expbin','./parser',415),
  ('expbin -> booleana','expbin',1,'p_expbin','./parser',416),
  ('expbin -> lienzo','expbin',1,'p_expbin','./parser',417),
  ('booleana -> booleana operatorB booleana','booleana',3,'p_booleana','./parser',422),
  ('booleana -> booleana operatorB arit','booleana',3,'p_booleana','./parser',423),
  ('booleana -> booleana operatorB lienzo','booleana',3,'p_booleana','./parser',424),
  ('booleana -> TkParAbre booleana TkParCierra','booleana',3,'p_booleana','./parser',425),
  ('booleana -> booleana TkNegacion','booleana',2,'p_booleana','./parser',426),
  ('booleana -> TkTrue','booleana',1,'p_booleana','./parser',427),
  ('booleana -> TkFalse','booleana',1,'p_booleana','./parser',428),
  ('booleana -> TkIdent','booleana',1,'p_booleana','./parser',429),
  ('lienzo -> lienzo operatorL lienzo','lienzo',3,'p_lienzo','./parser',456),
  ('lienzo -> TkParAbre lienzo TkParCierra','lienzo',3,'p_lienzo','./parser',457),
  ('lienzo -> TkRot lienzo','lienzo',2,'p_lienzo','./parser',458),
  ('lienzo -> lienzo TkTras','lienzo',2,'p_lienzo','./parser',459),
  ('lienzo -> TkLienzo','lienzo',1,'p_lienzo','./parser',460),
  ('lienzo -> TkIdent','lienzo',1,'p_lienzo','./parser',461),
  ('operatorA -> TkSuma','operatorA',1,'p_operatorA','./parser',475),
  ('operatorA -> TkResta','operatorA',1,'p_operatorA','./parser',476),
  ('operatorA -> TkMult','operatorA',1,'p_operatorA','./parser',477),
  ('operatorA -> TkDiv','operatorA',1,'p_operatorA','./parser',478),
  ('operatorA -> TkMod','operatorA',1,'p_operatorA','./parser',479),
  ('operatorB -> TkMenor','operatorB',1,'p_operatorB','./parser',483),
  ('operatorB -> TkMenorIgual','operatorB',1,'p_operatorB','./parser',484),
  ('operatorB -> TkMayor','operatorB',1,'p_operatorB','./parser',485),
  ('operatorB -> TkMayorIgual','operatorB',1,'p_operatorB','./parser',486),
  ('operatorB -> TkIgual','operatorB',1,'p_operatorB','./parser',487),
  ('operatorB -> TkDesIgual','operatorB',1,'p_operatorB','./parser',488),
  ('operatorB -> TkConjuncion','operatorB',1,'p_operatorB','./parser',489),
  ('operatorB -> TkDisyuncion','operatorB',1,'p_operatorB','./parser',490),
  ('operatorL -> TkHorConcat','operatorL',1,'p_operatorL','./parser',494),
  ('operatorL -> TkVerConcat','operatorL',1,'p_operatorL','./parser',495),
]
