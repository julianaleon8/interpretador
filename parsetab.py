
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x92\xabU\xd9\xff\x0b\xd9\n\xad\x87]\x83\xf5\xb5\xcd.'
    
_lr_action_items = {'TkTrue':([1,4,13,17,22,24,25,26,27,29,30,31,32,42,52,],[10,10,10,10,-39,-43,-44,-42,-40,-41,-38,10,-45,10,10,]),'TkMod':([38,40,45,50,53,56,58,64,80,81,],[-16,-15,68,-16,68,-16,68,68,-14,68,]),'TkIf':([0,15,28,35,75,82,89,],[1,1,1,1,1,1,1,]),'TkResta':([17,22,24,25,26,27,29,30,31,32,36,38,40,42,45,50,52,53,56,57,58,64,67,68,69,70,71,72,80,81,],[36,-39,-43,-44,-42,-40,-41,-38,36,-45,36,-16,-15,36,67,-16,36,67,-16,36,-13,67,-34,-37,-36,-35,36,-33,-14,67,]),'TkNegacion':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,23,-26,23,-24,23,-27,-15,23,-32,-22,-16,23,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkParAbre':([1,4,13,17,22,24,25,26,27,29,30,31,32,36,42,44,52,57,59,60,62,66,67,68,69,70,71,72,],[13,13,13,42,-39,-43,-44,-42,-40,-41,-38,52,-45,57,42,66,52,57,-47,-46,66,66,-34,-37,-36,-35,57,-33,]),'TkVerConcat':([37,43,49,61,63,65,78,79,],[59,-32,59,-31,59,-30,59,-29,]),'TkFalse':([1,4,13,17,22,24,25,26,27,29,30,31,32,42,52,],[14,14,14,14,-39,-43,-44,-42,-40,-41,-38,14,-45,14,14,]),'TkConjuncion':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,25,-26,25,-24,25,-27,-15,25,-32,-22,-16,25,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkNum':([6,17,22,24,25,26,27,29,30,31,32,36,42,46,47,52,57,67,68,69,70,71,72,83,],[18,40,-39,-43,-44,-42,-40,-41,-38,40,-45,40,40,73,74,40,40,-34,-37,-36,-35,40,-33,86,]),'TkWith':([0,15,28,35,75,82,89,],[9,9,9,9,9,9,9,]),'TkDesIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,24,-26,24,-24,24,-27,-15,24,-32,-22,-16,24,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkDone':([10,14,19,20,23,37,38,39,40,41,43,45,48,49,50,51,53,54,55,56,58,61,65,76,77,78,79,80,81,84,85,87,88,90,91,],[-25,-26,-10,-11,-24,-19,-16,-4,-15,-18,-32,-17,76,-22,-16,-20,-21,-23,77,-16,-13,-31,-30,-6,-7,-28,-29,-14,-12,87,88,-5,-9,91,-8,]),'TkRead':([0,15,28,35,75,82,89,],[8,8,8,8,8,8,8,]),'TkMenorIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,22,-26,22,-24,22,-27,-15,22,-32,-22,-16,22,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkIdent':([0,1,4,8,9,13,15,17,22,24,25,26,27,28,29,30,31,32,35,36,42,52,57,67,68,69,70,71,72,75,82,89,],[5,11,11,20,21,11,5,38,-39,-43,-44,-42,-40,5,-41,-38,50,-45,5,56,38,50,56,-34,-37,-36,-35,56,-33,5,5,5,]),'TkMult':([38,40,45,50,53,56,58,64,80,81,],[-16,-15,70,-16,70,-16,70,70,-14,70,]),'TkDisyuncion':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,32,-26,32,-24,32,-27,-15,32,-32,-22,-16,32,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkWhile':([0,15,28,35,75,82,89,],[4,4,4,4,4,4,4,]),'TkMayor':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,27,-26,27,-24,27,-27,-15,27,-32,-22,-16,27,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'$end':([2,3,10,14,19,20,23,34,37,38,39,40,41,43,45,49,50,51,53,54,56,58,61,65,76,77,78,79,80,81,87,88,91,],[-2,0,-25,-26,-10,-11,-24,-1,-19,-16,-4,-15,-18,-32,-17,-22,-16,-20,-21,-23,-16,-13,-31,-30,-6,-7,-28,-29,-14,-12,-5,-9,-8,]),'TkPuntoYComa':([2,3,10,14,19,20,23,34,37,38,39,40,41,43,45,49,50,51,53,54,56,58,61,65,76,77,78,79,80,81,87,88,91,],[-2,15,-25,-26,-10,-11,-24,-1,-19,-16,-4,-15,-18,-32,-17,-22,-16,-20,-21,-23,-16,-13,-31,-30,-6,-7,-28,-29,-14,-12,-5,-9,-8,]),'TkAsignacion':([5,],[17,]),'TkElse':([10,14,19,20,23,37,38,39,40,41,43,45,48,49,50,51,53,54,56,58,61,65,76,77,78,79,80,81,87,88,91,],[-25,-26,-10,-11,-24,-19,-16,-4,-15,-18,-32,-17,75,-22,-16,-20,-21,-23,-16,-13,-31,-30,-6,-7,-28,-29,-14,-12,-5,-9,-8,]),'TkHorConcat':([37,43,49,61,63,65,78,79,],[60,-32,60,-31,60,-30,60,-29,]),'TkDiv':([38,40,45,50,53,56,58,64,80,81,],[-16,-15,69,-16,69,-16,69,69,-14,69,]),'TkTras':([37,43,49,61,63,65,78,79,],[61,-32,61,-31,61,61,61,-29,]),'TkIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,26,-26,26,-24,26,-27,-15,26,-32,-22,-16,26,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkTo':([18,74,],[46,83,]),'TkMenor':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,30,-26,30,-24,30,-27,-15,30,-32,-22,-16,30,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkRot':([17,22,24,25,26,27,29,30,31,32,42,44,52,59,60,62,66,],[44,-39,-43,-44,-42,-40,-41,-38,44,-45,44,44,44,-47,-46,44,44,]),'TkRepeat':([10,11,14,16,23,40,43,49,50,51,53,54,56,58,61,65,73,78,79,80,81,86,],[-25,-27,-26,35,-24,-15,-32,-22,-16,-20,-21,-23,-16,-13,-31,-30,82,-28,-29,-14,-12,89,]),'TkMayorIgual':([10,11,12,14,16,23,33,38,40,41,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,29,-26,29,-24,29,-27,-15,29,-32,-22,-16,29,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkParCierra':([10,11,14,23,33,38,40,43,49,50,51,53,54,56,58,61,63,64,65,78,79,80,81,],[-25,-27,-26,-24,54,-16,-15,-32,-22,-16,-20,-21,-23,-16,-13,-31,79,80,-30,-28,-29,-14,-12,]),'TkFrom':([0,15,21,28,35,75,82,89,],[6,6,47,6,6,6,6,6,]),'TkThen':([10,11,12,14,23,40,43,49,50,51,53,54,56,58,61,65,78,79,80,81,],[-25,-27,28,-26,-24,-15,-32,-22,-16,-20,-21,-23,-16,-13,-31,-30,-28,-29,-14,-12,]),'TkLienzo':([7,17,22,24,25,26,27,29,30,31,32,42,44,52,59,60,62,66,],[19,43,-39,-43,-44,-42,-40,-41,-38,43,-45,43,43,43,-47,-46,43,43,]),'TkSuma':([38,40,45,50,53,56,58,64,80,81,],[-16,-15,72,-16,72,-16,-13,72,-14,72,]),'TkPrint':([0,15,28,35,75,82,89,],[7,7,7,7,7,7,7,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instr':([0,15,28,35,75,82,89,],[2,34,48,55,84,85,90,]),'expr':([0,],[3,]),'lienzo':([17,31,42,44,52,62,66,],[37,49,63,65,63,78,63,]),'expbin':([17,],[39,]),'booleana':([1,4,13,17,31,42,52,],[12,16,33,41,51,33,33,]),'operatorA':([45,53,58,64,81,],[71,71,71,71,71,]),'operatorB':([12,16,33,41,51,],[31,31,31,31,31,]),'arit':([17,31,36,42,52,57,71,],[45,53,58,64,64,64,81,]),'operatorL':([37,49,63,65,78,],[62,62,62,62,62,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> expr TkPuntoYComa instr','expr',3,'p_expr','./parser',369),
  ('expr -> instr','expr',1,'p_expr','./parser',370),
  ('empty -> <empty>','empty',0,'p_empty','./parser',377),
  ('instr -> TkIdent TkAsignacion expbin','instr',3,'p_instr','./parser',382),
  ('instr -> TkIf booleana TkThen instr TkElse instr TkDone','instr',7,'p_instr','./parser',383),
  ('instr -> TkIf booleana TkThen instr TkDone','instr',5,'p_instr','./parser',384),
  ('instr -> TkWhile booleana TkRepeat instr TkDone','instr',5,'p_instr','./parser',385),
  ('instr -> TkWith TkIdent TkFrom TkNum TkTo TkNum TkRepeat instr TkDone','instr',9,'p_instr','./parser',386),
  ('instr -> TkFrom TkNum TkTo TkNum TkRepeat instr TkDone','instr',7,'p_instr','./parser',387),
  ('instr -> TkPrint TkLienzo','instr',2,'p_instr','./parser',388),
  ('instr -> TkRead TkIdent','instr',2,'p_instr','./parser',389),
  ('arit -> arit operatorA arit','arit',3,'p_arit','./parser',414),
  ('arit -> TkResta arit','arit',2,'p_arit','./parser',415),
  ('arit -> TkParAbre arit TkParCierra','arit',3,'p_arit','./parser',416),
  ('arit -> TkNum','arit',1,'p_arit','./parser',417),
  ('arit -> TkIdent','arit',1,'p_arit','./parser',418),
  ('expbin -> arit','expbin',1,'p_expbin','./parser',440),
  ('expbin -> booleana','expbin',1,'p_expbin','./parser',441),
  ('expbin -> lienzo','expbin',1,'p_expbin','./parser',442),
  ('booleana -> booleana operatorB booleana','booleana',3,'p_booleana','./parser',447),
  ('booleana -> booleana operatorB arit','booleana',3,'p_booleana','./parser',448),
  ('booleana -> booleana operatorB lienzo','booleana',3,'p_booleana','./parser',449),
  ('booleana -> TkParAbre booleana TkParCierra','booleana',3,'p_booleana','./parser',450),
  ('booleana -> booleana TkNegacion','booleana',2,'p_booleana','./parser',451),
  ('booleana -> TkTrue','booleana',1,'p_booleana','./parser',452),
  ('booleana -> TkFalse','booleana',1,'p_booleana','./parser',453),
  ('booleana -> TkIdent','booleana',1,'p_booleana','./parser',454),
  ('lienzo -> lienzo operatorL lienzo','lienzo',3,'p_lienzo','./parser',481),
  ('lienzo -> TkParAbre lienzo TkParCierra','lienzo',3,'p_lienzo','./parser',482),
  ('lienzo -> TkRot lienzo','lienzo',2,'p_lienzo','./parser',483),
  ('lienzo -> lienzo TkTras','lienzo',2,'p_lienzo','./parser',484),
  ('lienzo -> TkLienzo','lienzo',1,'p_lienzo','./parser',485),
  ('operatorA -> TkSuma','operatorA',1,'p_operatorA','./parser',499),
  ('operatorA -> TkResta','operatorA',1,'p_operatorA','./parser',500),
  ('operatorA -> TkMult','operatorA',1,'p_operatorA','./parser',501),
  ('operatorA -> TkDiv','operatorA',1,'p_operatorA','./parser',502),
  ('operatorA -> TkMod','operatorA',1,'p_operatorA','./parser',503),
  ('operatorB -> TkMenor','operatorB',1,'p_operatorB','./parser',507),
  ('operatorB -> TkMenorIgual','operatorB',1,'p_operatorB','./parser',508),
  ('operatorB -> TkMayor','operatorB',1,'p_operatorB','./parser',509),
  ('operatorB -> TkMayorIgual','operatorB',1,'p_operatorB','./parser',510),
  ('operatorB -> TkIgual','operatorB',1,'p_operatorB','./parser',511),
  ('operatorB -> TkDesIgual','operatorB',1,'p_operatorB','./parser',512),
  ('operatorB -> TkConjuncion','operatorB',1,'p_operatorB','./parser',513),
  ('operatorB -> TkDisyuncion','operatorB',1,'p_operatorB','./parser',514),
  ('operatorL -> TkHorConcat','operatorL',1,'p_operatorL','./parser',518),
  ('operatorL -> TkVerConcat','operatorL',1,'p_operatorL','./parser',519),
]
